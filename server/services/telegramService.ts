import crypto from "crypto";

interface TelegramUser {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
  photo_url?: string;
  auth_date: number;
  hash: string;
}

export class TelegramService {
  private botToken: string;
  private botApiUrl: string;

  constructor() {
    this.botToken = process.env.TELEGRAM_BOT_TOKEN || process.env.BOT_TOKEN || "";
    this.botApiUrl = `https://api.telegram.org/bot${this.botToken}`;
    
    if (!this.botToken) {
      console.warn("TELEGRAM_BOT_TOKEN not provided, Telegram functionality will be limited");
    }
  }

  // Verify Telegram Login Widget data
  verifyTelegramAuth(data: TelegramUser): boolean {
    if (!this.botToken) {
      console.error("Bot token not available for verification");
      return false;
    }

    const { hash, ...userData } = data;
    
    // Create data string for verification
    const dataKeys = Object.keys(userData).sort();
    const dataString = dataKeys
      .map(key => `${key}=${userData[key as keyof typeof userData]}`)
      .join('\n');
    
    // Create secret key
    const secretKey = crypto.createHash('sha256').update(this.botToken).digest();
    
    // Create expected hash
    const expectedHash = crypto
      .createHmac('sha256', secretKey)
      .update(dataString)
      .digest('hex');
    
    return expectedHash === hash;
  }

  // Send message to user
  async sendMessage(chatId: string, message: string, options: any = {}): Promise<boolean> {
    if (!this.botToken) {
      console.warn("Cannot send message: Bot token not available");
      return false;
    }

    try {
      const response = await fetch(`${this.botApiUrl}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: 'HTML',
          ...options,
        }),
      });

      const result = await response.json();
      return result.ok;
    } catch (error) {
      console.error('Error sending Telegram message:', error);
      return false;
    }
  }

  async sendPrincipleReminder(chatId: string, principle: any, userName: string, reminderType: string = 'principle'): Promise<boolean> {
    let message = '';

    switch (reminderType) {
      case 'principle':
        message = `
ü™∑ –ù–æ–≤–∏–π –ø—Ä–∏–Ω—Ü–∏–ø –¥–ª—è ${userName}!

**"${principle.title}"**

${principle.description}

üí≠ –†–æ–∑–¥—É–º–∏ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏:
‚Ä¢ –Ø–∫ —Ü–µ–π –ø—Ä–∏–Ω—Ü–∏–ø —Å—Ç–æ—Å—É—î—Ç—å—Å—è –º–æ–≥–æ –∂–∏—Ç—Ç—è?
‚Ä¢ –î–µ —è –º–æ–∂—É –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –π–æ–≥–æ —Å—å–æ–≥–æ–¥–Ω—ñ?
‚Ä¢ –©–æ –∑–º—ñ–Ω–∏—Ç—å –ø—Ä–∞–∫—Ç–∏–∫–∞ —Ü—å–æ–≥–æ –ø—Ä–∏–Ω—Ü–∏–ø—É?

üìù –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º–∏ —Ä–æ–∑–¥—É–º–∞–º–∏ –≤ —â–æ–¥–µ–Ω–Ω–∏–∫—É –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.

üåü –ì–∞—Ä–Ω–æ—ó –ø—Ä–∞–∫—Ç–∏–∫–∏!
        `;
        break;

      case 'test':
        message = `
üß™ –¢–µ—Å—Ç–æ–≤–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è ${userName}!

ü™∑ –ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä–∏–Ω—Ü–∏–ø: "${principle.title}"

${principle.description}

–¶–µ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å. –Ø–∫—â–æ –≤–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∑–Ω–∞—á–∏—Ç—å –≤—Å–µ –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ! 

‚úÖ –°–∏—Å—Ç–µ–º–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –∞–∫—Ç–∏–≤–Ω–∞
        `;
        break;

      default:
        message = `
ü™∑ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è ${userName}

–ü—Ä–∏–Ω—Ü–∏–ø: "${principle.title}"

${principle.description}

üí≠ –ù–µ –∑–∞–±—É–≤–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫—É–≤–∞—Ç–∏ —Ü–µ–π –ø—Ä–∏–Ω—Ü–∏–ø —Ç–∞ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ —Å–≤–æ—ó —Ä–æ–∑–¥—É–º–∏ –≤ —â–æ–¥–µ–Ω–Ω–∏–∫.
        `;
    }

    return await this.sendMessage(chatId, message.trim());
  }

  async sendReflectionReminder(chatId: string, userName: string): Promise<boolean> {
    const message = `
üåô –ß–∞—Å –¥–ª—è —Ä–µ—Ñ–ª–µ–∫—Å—ñ—ó, ${userName}!

üìù –ü—ñ–¥–≤–µ–¥—ñ—Ç—å –ø—ñ–¥—Å—É–º–∫–∏ –¥–Ω—è:

üí≠ –ü–∏—Ç–∞–Ω–Ω—è –¥–ª—è —Ä–æ–∑–¥—É–º—ñ–≤:
‚Ä¢ –Ø–∫—ñ –ø—Ä–∏–Ω—Ü–∏–ø–∏ –≤–∏ –ø—Ä–∞–∫—Ç–∏–∫—É–≤–∞–ª–∏ —Å—å–æ–≥–æ–¥–Ω—ñ?
‚Ä¢ –Ø–∫—ñ —Å–∏—Ç—É–∞—Ü—ñ—ó –¥–æ–ø–æ–º–æ–≥–ª–∏ –≤–∞–º –∫—Ä–∞—â–µ –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —ó—Ö?
‚Ä¢ –©–æ –≤–∏ –≤—ñ–¥—á—É–≤–∞—î—Ç–µ –ø—ñ—Å–ª—è –¥–Ω—è –ø—Ä–∞–∫—Ç–∏–∫–∏?
‚Ä¢ –Ø–∫—ñ –≤–∏—Å–Ω–æ–≤–∫–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?

–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º–∏ —Ä–æ–∑–¥—É–º–∞–º–∏ –≤ —â–æ–¥–µ–Ω–Ω–∏–∫—É, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ —Ü—ñ–Ω–Ω–∏–π –¥–æ—Å–≤—ñ–¥.

–°–æ–ª–æ–¥–∫–∏—Ö —Å–Ω—ñ–≤! ‚ú®
    `;

    return await this.sendMessage(chatId, message.trim());
  }

  // Set webhook for bot
  async setWebhook(webhookUrl: string): Promise<boolean> {
    if (!this.botToken) {
      console.warn("Cannot set webhook: Bot token not available");
      return false;
    }

    try {
      const response = await fetch(`${this.botApiUrl}/setWebhook`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          url: webhookUrl,
        }),
      });

      const result = await response.json();
      return result.ok;
    } catch (error) {
      console.error('Error setting webhook:', error);
      return false;
    }
  }

  // Process bot updates
  async processBotUpdate(update: any): Promise<void> {
    try {
      if (update.message) {
        await this.handleMessage(update.message);
      }
    } catch (error) {
      console.error('Error processing bot update:', error);
    }
  }

  private async handleMessage(message: any): Promise<void> {
    const chatId = message.chat.id.toString();
    const text = message.text;
    const userId = message.from.id;

    // Handle commands
    if (text?.startsWith('/')) {
      await this.handleCommand(chatId, text, message.from);
      return;
    }

    // Handle regular messages as diary entries
    if (text && text.trim().length > 0) {
      await this.handleDiaryEntry(chatId, text, userId);
    }
  }

  private async handleCommand(chatId: string, command: string, user: any): Promise<void> {
    switch (command) {
      case '/start':
        await this.handleStartCommand(chatId, user);
        break;
      case '/my_principle':
        await this.handleMyPrincipleCommand(chatId, user.id);
        break;
      case '/stats':
        await this.handleStatsCommand(chatId, user.id);
        break;
      case '/settings':
        await this.handleSettingsCommand(chatId);
        break;
      default:
        await this.sendMessage(chatId, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É.");
    }
  }

  private async handleStartCommand(chatId: string, user: any): Promise<void> {
    const message = `
–ü—Ä–∏–≤—ñ—Ç, ${user.first_name}! üëã

–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –ö–∞—Ä–º—ñ—á–Ω–æ–≥–æ —â–æ–¥–µ–Ω–Ω–∏–∫–∞! 

üßò‚Äç‚ôÇÔ∏è –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ:
‚Ä¢ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∫–∞—Ä–º—ñ—á–Ω—ñ –ø—Ä–∏–Ω—Ü–∏–ø–∏  
‚Ä¢ –í–µ—Å—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–∫ –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–æ–∑–≤–∏—Ç–∫—É
‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Å–≤—ñ–π –ø—Ä–æ–≥—Ä–µ—Å

üîó –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ —É–≤—ñ–π–¥—ñ—Ç—å —É –≤–µ–±-–¥–æ–¥–∞—Ç–æ–∫:
${process.env.FRONTEND_URL || 'http://localhost:5000'}

üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –±—É–¥—å-—â–æ - —Ü–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–∞–Ω–µ –∑–∞–ø–∏—Å–æ–º —É –≤–∞—à–æ–º—É —â–æ–¥–µ–Ω–Ω–∏–∫—É!

üÜî –í–∞—à Chat ID: <code>${chatId}</code>
    `.trim();

    await this.sendMessage(chatId, message);
  }

  private async handleMyPrincipleCommand(chatId: string, telegramId: number): Promise<void> {
    // This would need to query the database for user's current principle
    const message = `
üåü <b>–í–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–∏–Ω—Ü–∏–ø</b>

–©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —Å–≤—ñ–π –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–∏–Ω—Ü–∏–ø, –≤—ñ–¥–∫—Ä–∏–π—Ç–µ –≤–µ–±-–¥–æ–¥–∞—Ç–æ–∫:
${process.env.FRONTEND_URL || 'http://localhost:5000'}

üì± –¢–∞–º –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó.
    `.trim();

    await this.sendMessage(chatId, message);
  }

  private async handleStatsCommand(chatId: string, telegramId: number): Promise<void> {
    const message = `
üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

–î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—ñ–¥–∫—Ä–∏–π—Ç–µ –≤–µ–±-–¥–æ–¥–∞—Ç–æ–∫:
${process.env.FRONTEND_URL || 'http://localhost:5000'}

üìà –¢–∞–º –≤–∏ –∑–Ω–∞–π–¥–µ—Ç–µ:
‚Ä¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –ø–æ—Å–ø—ñ–ª—å
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö  
‚Ä¢ –ì—Ä–∞—Ñ—ñ–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    `.trim();

    await this.sendMessage(chatId, message);
  }

  private async handleSettingsCommand(chatId: string): Promise<void> {
    const message = `
‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</b>

–î–ª—è –∑–º—ñ–Ω–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –≤—ñ–¥–∫—Ä–∏–π—Ç–µ –≤–µ–±-–¥–æ–¥–∞—Ç–æ–∫:
${process.env.FRONTEND_URL || 'http://localhost:5000'}

üîß –¢–∞–º –≤–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏:
‚Ä¢ –ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
‚Ä¢ –ß–∞—Å—Ç–æ—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
‚Ä¢ –ú–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    `.trim();

    await this.sendMessage(chatId, message);
  }

  private async handleDiaryEntry(chatId: string, text: string, telegramId: number): Promise<void> {
    try {
      // Find user by telegram ID
      const user = await storage.getUserByTelegramId(telegramId.toString());
      if (!user) {
        await this.sendMessage(chatId, 
          '–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è —É –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É: ' + process.env.REPLIT_DOMAINS?.split(',')[0] || 'https://your-app.replit.app'
        );
        return;
      }

      // Get user's current principle (sequential practice)
      const currentPrincipleNumber = user.currentPrinciple || 1;
      const currentPrinciple = await storage.getPrincipleByNumber(currentPrincipleNumber);
      
      if (!currentPrinciple) {
        await this.sendMessage(chatId, '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–∏–Ω—Ü–∏–ø. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
        return;
      }

      // Create diary entry with current principle
      const entry = await storage.createJournalEntry({
        userId: user.id,
        principleId: currentPrinciple.id,
        content: text,
        mood: null,
        energyLevel: null
      });

      // Send confirmation with current principle info
      await this.sendMessage(chatId, 
        `‚úÖ *–ó–∞–ø–∏—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ!*\n\n` +
        `üìù –í–∞—à –∑–∞–ø–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏–≤'—è–∑–∞–Ω–æ –¥–æ *–ü—Ä–∏–Ω—Ü–∏–ø—É ${currentPrincipleNumber}: ${currentPrinciple.title}* (–≤–∞—à –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–∏–Ω—Ü–∏–ø —É –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ–π –ø—Ä–∞–∫—Ç–∏—Ü—ñ)\n\n` +
        `–Ø–∫—â–æ –≤–∞—à—ñ —Ä–æ–∑–¥—É–º–∏ —Å—Ç–æ—Å—É–≤–∞–ª–∏—Å—è —ñ–Ω—à–æ–≥–æ –ø—Ä–∏–Ω—Ü–∏–ø—É, –≤–∏ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ü–µ —É –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É.`,
        { parse_mode: 'Markdown' }
      );

    } catch (error) {
      console.error('Error handling diary entry:', error);
      await this.sendMessage(chatId, '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∑–∞–ø–∏—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
  }
}

export const telegramService = new TelegramService();
