import TelegramBot from "node-telegram-bot-api";
import { storage } from "../storage.js";
import { subscriptionService } from "../services/subscriptionService.js";
import { AIAssistant } from "../services/ai-assistant.js";
import { db } from "../db.js";
import { journalEntries, achievements } from "@shared/schema.js";
import { eq, gte, and } from "drizzle-orm";
import { getCleanFrontendUrl } from "../utils/env.js";

const token = process.env.TELEGRAM_BOT_TOKEN;

if (!token) {
  console.log("‚ö†Ô∏è TELEGRAM_BOT_TOKEN not found - enhanced bot disabled");
}

const isWebhookMode = process.env.BOT_MODE === "webhook";
const bot = new TelegramBot(token, {
  polling: !isWebhookMode, // ‚¨ÖÔ∏è polling –≤–∫–ª—é—á–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ù–ï webhook
});

const aiAssistant = new AIAssistant();

// User sessions for multi-step interactions
const userSessions = new Map<string, any>();

function getGreeting(name: string): string {
  const hour = new Date().getHours();
  if (hour < 12) return `–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É, ${name}! üåÖ`;
  if (hour < 18) return `–î–æ–±—Ä–∏–π –¥–µ–Ω—å, ${name}! ‚òÄÔ∏è`;
  return `–î–æ–±—Ä–∏–π –≤–µ—á—ñ—Ä, ${name}! üåô`;
}

// Helper functions
async function getUserKarma(userId: number): Promise<number> {
  const entries = await db.query.journalEntries.findMany({
    where: eq(journalEntries.userId, userId),
  });
  return entries.reduce((sum, entry) => sum + (entry.karmaPoints || 0), 0);
}

async function getUserStreak(userId: number): Promise<number> {
  const stats = await storage.getUserStats(userId);
  return stats?.streakDays || 0;
}

async function getTodayKarma(userId: number): Promise<number> {
  const today = new Date();
  today.setHours(0, 0, 0, 0);

  const entries = await db.query.journalEntries.findMany({
    where: and(
      eq(journalEntries.userId, userId),
      gte(journalEntries.createdAt, today),
    ),
  });

  return entries.reduce((sum, entry) => sum + (entry.karmaPoints || 0), 0);
}

async function getTotalEntries(userId: number): Promise<number> {
  const stats = await storage.getUserStats(userId);
  return stats?.totalEntries || 0;
}

async function checkAndNotifyAchievements(chatId: number, userId: number) {
  const totalEntries = await getTotalEntries(userId);
  const streak = await getUserStreak(userId);

  let newAchievement = null;

  if (totalEntries === 1) {
    newAchievement = {
      type: "first_entry",
      title: "üåü –ü–µ—Ä—à–∏–π –∫—Ä–æ–∫",
      description: "–í–∞—à –ø–µ—Ä—à–∏–π –∑–∞–ø–∏—Å —É —â–æ–¥–µ–Ω–Ω–∏–∫—É!",
    };
  } else if (streak === 7) {
    newAchievement = {
      type: "7_days_streak",
      title: "üî• –¢–∏–∂–Ω–µ–≤–∞ —Å–µ—Ä—ñ—è",
      description: "7 –¥–Ω—ñ–≤ –ø–æ—Å–ø—ñ–ª—å!",
    };
  } else if (totalEntries === 10) {
    newAchievement = {
      type: "gratitude_master",
      title: "üôè –ú–∞–π—Å—Ç–µ—Ä –≤–¥—è—á–Ω–æ—Å—Ç—ñ",
      description: "10 –∑–∞–ø–∏—Å—ñ–≤ —É —â–æ–¥–µ–Ω–Ω–∏–∫—É!",
    };
  }

  if (newAchievement) {
    await bot.sendMessage(
      chatId,
      `üèÜ –ù–æ–≤–µ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è!\n\n${newAchievement.title}\n${newAchievement.description}\n\n–í—ñ—Ç–∞—î–º–æ! üéâ`,
    );
  }
}

// Main menu
async function showMainMenu(chatId: number, user: any, messageId?: number) {
  const greeting = getGreeting(user.firstName || "–¥—Ä—É–∂–µ");
  const totalKarma = await getUserKarma(user.id);
  const streak = await getUserStreak(user.id);

  const options = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: "üìù –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å", callback_data: "add_entry" },
          { text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "stats" },
        ],
        [
          { text: "üèÜ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è", callback_data: "achievements" },
          { text: "üí¨ AI-–ø–æ—Ä–∞–¥–∞", callback_data: "ai_advice" },
        ],
        [{ text: "üíé –ü—ñ–¥–ø–∏—Å–∫–∞", callback_data: "subscription" }],
        [
          {
            text: "üì± –í—ñ–¥–∫—Ä–∏—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫",
            web_app: {
              url: getCleanFrontendUrl(),
            },
          },
        ],
      ],
    },
  };

  const message =
    `${greeting}\n\n` +
    `üí´ –¢–≤–æ—è –∫–∞—Ä–º–∞: ${totalKarma} –±–∞–ª—ñ–≤\n` +
    `üî• –°–µ—Ä—ñ—è –¥–Ω—ñ–≤: ${streak}\n\n` +
    `–©–æ –±–∞–∂–∞—î—à –∑—Ä–æ–±–∏—Ç–∏?`;

  if (messageId) {
    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      ...options,
    });
  } else {
    await bot.sendMessage(chatId, message, options);
  }
}

// Handle /start command
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from?.id.toString();
  const firstName = msg.from?.first_name || "–¥—Ä—É–∂–µ";

  if (!telegramId) {
    return bot.sendMessage(chatId, "‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó");
  }

  try {
    const existingUser = await storage.getUserByTelegramId(telegramId);

    if (existingUser) {
      await showMainMenu(chatId, existingUser);
    } else {
      const options = {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "üöÄ –ü–æ—á–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é",
                web_app: {
                  url: getCleanFrontendUrl(),
                },
              },
            ],
          ],
        },
      };

      return bot.sendMessage(
        chatId,
        `${getGreeting(firstName)}\n\n` +
          `üôè –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –ö–∞—Ä–º—ñ—á–Ω–æ–≥–æ –©–æ–¥–µ–Ω–Ω–∏–∫–∞!\n\n` +
          `–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ:\n` +
          `‚Ä¢ üìù –ó–∞–ø–∏—Å—É–≤–∞—Ç–∏ –¥–æ–±—Ä—ñ —Å–ø—Ä–∞–≤–∏\n` +
          `‚Ä¢ üìä –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –∫–∞—Ä–º—É\n` +
          `‚Ä¢ üí¨ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ AI-–ø–æ—Ä–∞–¥–∏\n` +
          `‚Ä¢ üèÜ –°–≤—è—Ç–∫—É–≤–∞—Ç–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è\n\n` +
          `–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –≤ –¥–æ–¥–∞—Ç–∫—É:`,
        options,
      );
    }
  } catch (error) {
    console.error("‚ùå Error in /start command:", error);
    bot.sendMessage(chatId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
  }
});

// Handle callback queries
bot.on("callback_query", async (callbackQuery) => {
  const msg = callbackQuery.message;
  const data = callbackQuery.data;
  const chatId = msg?.chat.id;
  const telegramId = callbackQuery.from.id.toString();

  if (!chatId) return;

  try {
    await bot.answerCallbackQuery(callbackQuery.id);

    const user = await storage.getUserByTelegramId(telegramId);

    if (!user) {
      return bot.sendMessage(
        chatId,
        "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.",
      );
    }

    switch (data) {
      case "add_entry":
        const entryOptions = {
          reply_markup: {
            inline_keyboard: [
              [
                { text: "üíù –î–æ–±—Ä–æ—Ç–∞", callback_data: "entry_kindness" },
                { text: "üôè –í–¥—è—á–Ω—ñ—Å—Ç—å", callback_data: "entry_gratitude" },
              ],
              [
                { text: "ü§ù –î–æ–ø–æ–º–æ–≥–∞", callback_data: "entry_help" },
                { text: "üõ°Ô∏è –ê–Ω—Ç–∏–¥–æ—Ç", callback_data: "entry_antidote" }
              ],
              [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "main_menu" }],
            ],
          },
        };

        await bot.editMessageText("–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è —Å–≤–æ–≥–æ –∑–∞–ø–∏—Å—É:", {
          chat_id: chatId,
          message_id: msg.message_id,
          ...entryOptions,
        });
        break;

      case "entry_kindness":
      case "entry_gratitude":
      case "entry_help":
      case "entry_antidote":
        const category = data.replace("entry_", "");
        const categoryNames = {
          kindness: "–î–æ–±—Ä–æ—Ç–∞ üíù",
          gratitude: "–í–¥—è—á–Ω—ñ—Å—Ç—å üôè",
          help: "–î–æ–ø–æ–º–æ–≥–∞ ü§ù",
          antidote: "–ê–Ω—Ç–∏–¥–æ—Ç üõ°Ô∏è",
        };

        userSessions.set(telegramId, {
          waitingForEntry: true,
          category: category,
        });

        const promptText = category === 'antidote' 
          ? `–û–ø–∏—à–∏ –∞–Ω—Ç–∏–¥–æ—Ç –¥–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ—ó –¥—É–º–∫–∏ –∞–±–æ –¥—ñ—ó.\n` +
            `–©–æ –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–µ–≥–∞—Ç–∏–≤ –Ω–∞ –ø–æ–∑–∏—Ç–∏–≤?`
          : `–û–ø–∏—à–∏ —Å–≤–æ—é –¥–æ–±—Ä—É —Å–ø—Ä–∞–≤—É –∞–±–æ –∑–∞ —â–æ —Ç–∏ –≤–¥—è—á–Ω–∏–π.\n` +
            `–ù–∞–ø–∏—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∏–∂—á–µ:`;

        await bot.editMessageText(
          `–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${categoryNames[category]}\n\n` +
            promptText,
          {
            chat_id: chatId,
            message_id: msg.message_id,
            reply_markup: {
              inline_keyboard: [
                [{ text: "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data: "main_menu" }],
              ],
            },
          },
        );
        break;

      case "stats":
        const userStats = await storage.getUserStats(user.id);
        const totalKarma = await getUserKarma(user.id);
        const streak = await getUserStreak(user.id);
        const todayKarma = await getTodayKarma(user.id);
        const totalEntries = await getTotalEntries(user.id);

        const statsMessage =
          `üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n` +
          `üí´ –ó–∞–≥–∞–ª—å–Ω–∞ –∫–∞—Ä–º–∞: ${totalKarma} –±–∞–ª—ñ–≤\n` +
          `üî• –°–µ—Ä—ñ—è –¥–Ω—ñ–≤: ${streak}\n` +
          `üìÖ –ö–∞—Ä–º–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: ${todayKarma} –±–∞–ª—ñ–≤\n` +
          `üìù –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: ${totalEntries}\n` +
          `üòä –°–µ—Ä–µ–¥–Ω—ñ–π –Ω–∞—Å—Ç—Ä—ñ–π: ${(userStats?.averageMood || 0).toFixed(1)}/10\n` +
          `‚ö° –°–µ—Ä–µ–¥–Ω—è –µ–Ω–µ—Ä–≥—ñ—è: ${(userStats?.averageEnergy || 0).toFixed(1)}/10\n\n` +
          `–ü—Ä–æ–¥–æ–≤–∂—É–π —É —Ç–æ–º—É –∂ –¥—É—Å—ñ! üåü`;

        await bot.editMessageText(statsMessage, {
          chat_id: chatId,
          message_id: msg.message_id,
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üìà –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                  web_app: { url: `${getCleanFrontendUrl()}/analytics` },
                },
              ],
              [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "main_menu" }],
            ],
          },
        });
        break;

      case "achievements":
        const userAchievements = await db.query.achievements.findMany({
          where: eq(achievements.userId, user.id),
        });

        const achievementTitles = {
          first_entry: "üåü –ü–µ—Ä—à–∏–π –∫—Ä–æ–∫",
          "7_days_streak": "üî• –¢–∏–∂–Ω–µ–≤–∞ —Å–µ—Ä—ñ—è",
          gratitude_master: "üôè –ú–∞–π—Å—Ç–µ—Ä –≤–¥—è—á–Ω–æ—Å—Ç—ñ",
          karma_collector: "üèÜ –ó–±–∏—Ä–∞—á –∫–∞—Ä–º–∏",
          month_champion: "üìÖ –ß–µ–º–ø—ñ–æ–Ω –º—ñ—Å—è—Ü—è",
          mood_master: "üòä –ú–∞–π—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ—é",
        };

        let achievementsMessage = "üèÜ –¢–≤–æ—ó –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è:\n\n";

        if (userAchievements.length === 0) {
          achievementsMessage +=
            "–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –¥–æ—Å—è–≥–Ω–µ–Ω—å.\n–ü—Ä–æ–¥–æ–≤–∂—É–π –≤–µ—Å—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–∫! üí™";
        } else {
          userAchievements.forEach((achievement) => {
            const title =
              achievementTitles[achievement.type] || achievement.type;
            achievementsMessage += `${title}\n`;
          });
          achievementsMessage += `\n‚ú® –í—ñ–¥–∫—Ä–∏—Ç–æ: ${userAchievements.length} –¥–æ—Å—è–≥–Ω–µ–Ω—å`;
        }

        await bot.editMessageText(achievementsMessage, {
          chat_id: chatId,
          message_id: msg.message_id,
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üèÜ –í—Å—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è",
                  web_app: { url: `${getCleanFrontendUrl()}/dashboard` },
                },
              ],
              [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "main_menu" }],
            ],
          },
        });
        break;

      case "ai_advice":
        // Check subscription
        const subscription = await subscriptionService.getUserSubscription(
          user.id,
        );

        if (
          !subscription.features.aiRequests ||
          subscription.features.aiRequests === 0
        ) {
          await bot.editMessageText(
            "üíé AI-–ø–æ—Ä–∞–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø—ñ–¥–ø–∏—Å–æ–∫ Plus —Ç–∞ Pro.\n\n" +
              "–û—Ñ–æ—Ä–º–∏ –ø—ñ–¥–ø–∏—Å–∫—É, —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø–æ—Ä–∞–¥–∏ –≤—ñ–¥ AI!",
            {
              chat_id: chatId,
              message_id: msg.message_id,
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: "üíé –û—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É",
                      web_app: {
                        url: `${getCleanFrontendUrl()}/subscriptions`,
                      },
                    },
                  ],
                  [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "main_menu" }],
                ],
              },
            },
          );
          return;
        }

        // Show loading
        await bot.editMessageText("ü§î AI –≥–µ–Ω–µ—Ä—É—î –ø–æ—Ä–∞–¥—É...", {
          chat_id: chatId,
          message_id: msg.message_id,
        });

        try {
          const advice = await aiAssistant.analyzeUserEntries(user.id, "uk");

          await bot.editMessageText(
            `üí° AI-–ø–æ—Ä–∞–¥–∞ –¥–ª—è —Ç–µ–±–µ:\n\n${advice}\n\n‚ú® –ü—Ä–æ–¥–æ–≤–∂—É–π —Ç–≤–æ—Ä–∏—Ç–∏ –¥–æ–±—Ä–æ!`,
            {
              chat_id: chatId,
              message_id: msg.message_id,
              reply_markup: {
                inline_keyboard: [
                  [{ text: "üí° –©–µ –ø–æ—Ä–∞–¥–∞", callback_data: "ai_advice" }],
                  [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "main_menu" }],
                ],
              },
            },
          );
        } catch (error) {
          await bot.editMessageText(
            "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ä–∞–¥—É. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.\n\n" +
              "–ú–æ–∂–ª–∏–≤–æ, –≤–∏—á–µ—Ä–ø–∞–Ω–æ –ª—ñ–º—ñ—Ç AI-–∑–∞–ø–∏—Ç—ñ–≤.",
            {
              chat_id: chatId,
              message_id: msg.message_id,
              reply_markup: {
                inline_keyboard: [
                  [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "main_menu" }],
                ],
              },
            },
          );
        }
        break;

      case "subscription":
        const currentSubscription =
          await subscriptionService.getUserSubscription(user.id);

        let subscriptionMessage = "üíé –¢–≤–æ—è –ø—ñ–¥–ø–∏—Å–∫–∞:\n\n";

        if (currentSubscription.plan === "none") {
          subscriptionMessage +=
            "–£ —Ç–µ–±–µ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –ø–ª–∞–Ω.\n\n" +
            "–ü–µ—Ä–µ–≤–∞–≥–∏ –ø–ª–∞—Ç–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å–æ–∫:\n" +
            "‚Ä¢ üåü Light: –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n" +
            "‚Ä¢ ‚≠ê Plus: AI-–ø–æ—Ä–∞–¥–∏ (5/–º—ñ—Å—è—Ü—å)\n" +
            "‚Ä¢ üíé Pro: AI-—á–∞—Ç (–Ω–µ–æ–±–º–µ–∂–µ–Ω–æ)";
        } else {
          const planNames = {
            light: "üåü Light",
            plus: "‚≠ê Plus",
            pro: "üíé Pro",
          };

          subscriptionMessage += `–ü–ª–∞–Ω: ${planNames[currentSubscription.plan]}\n`;

          if (currentSubscription.endDate) {
            subscriptionMessage += `–î—ñ—î –¥–æ: ${new Date(currentSubscription.endDate).toLocaleDateString("uk-UA")}\n\n`;
          }

          if (currentSubscription.plan === "plus") {
            subscriptionMessage += "–¢–∏ –º–∞—î—à –¥–æ—Å—Ç—É–ø –¥–æ AI-–ø–æ—Ä–∞–¥! üí°";
          } else if (currentSubscription.plan === "pro") {
            subscriptionMessage += "–¢–∏ –º–∞—î—à –ø–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π! üöÄ";
          }
        }

        await bot.editMessageText(subscriptionMessage, {
          chat_id: chatId,
          message_id: msg.message_id,
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üíé –ö–µ—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫–æ—é",
                  web_app: { url: `${getCleanFrontendUrl()}/subscriptions` },
                },
              ],
              [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "main_menu" }],
            ],
          },
        });
        break;

      case "main_menu":
        await showMainMenu(chatId, user, msg.message_id);
        break;
    }
  } catch (error) {
    console.error("‚ùå Error handling callback query:", error);
    bot.sendMessage(chatId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
  }
});

// Handle text messages for journal entries
bot.on("message", async (msg) => {
  if (msg.text && !msg.text.startsWith("/")) {
    const chatId = msg.chat.id;
    const telegramId = msg.from?.id.toString();

    if (!telegramId) return;

    const session = userSessions.get(telegramId);

    if (session?.waitingForEntry) {
      try {
        const user = await storage.getUserByTelegramId(telegramId);

        if (!user) {
          await bot.sendMessage(
            chatId,
            "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /start",
          );
          return;
        }

        const category = session.category;
        const description = msg.text;

        // Determine karma points
        const karmaPoints =
          {
            kindness: 10,
            gratitude: 5,
            help: 15,
          }[category] || 5;

        // Add journal entry
        await storage.createJournalEntry({
          userId: user.id,
          principleId: user.currentPrinciple,
          category,
          description,
          mood: 7, // Default mood
          energy: 7, // Default energy
          karmaPoints,
        });

        // Update user stats
        await storage.updateUserStats(user.id);

        // Check achievements
        await checkAndNotifyAchievements(chatId, user.id);

        // Clear session
        userSessions.delete(telegramId);

        const totalKarma = await getUserKarma(user.id);

        await bot.sendMessage(
          chatId,
          `‚úÖ –ó–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ!\n\n` +
            `–¢–∏ –æ—Ç—Ä–∏–º–∞–≤ ${karmaPoints} –±–∞–ª—ñ–≤ –∫–∞—Ä–º–∏.\n` +
            `–¢–≤–æ—è –∑–∞–≥–∞–ª—å–Ω–∞ –∫–∞—Ä–º–∞: ${totalKarma} –±–∞–ª—ñ–≤\n\n` +
            `–ü—Ä–æ–¥–æ–≤–∂—É–π —Ç–≤–æ—Ä–∏—Ç–∏ –¥–æ–±—Ä–æ! üåü`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: "üìù –î–æ–¥–∞—Ç–∏ —â–µ", callback_data: "add_entry" },
                  { text: "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data: "main_menu" },
                ],
              ],
            },
          },
        );
      } catch (error) {
        console.error("‚ùå Error adding journal entry:", error);
        await bot.sendMessage(
          chatId,
          "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
        );
        userSessions.delete(telegramId);
      }
    }
  }
});

// Handle errors
bot.on("error", (error) => {
  console.error("‚ùå Telegram bot error:", error);
});

console.log("ü§ñ Telegram bot started successfully");

export function initBot() {
  // Bot initialization is already done above
  global.telegramBotInstance = bot;
  return bot;
}

export { bot };
