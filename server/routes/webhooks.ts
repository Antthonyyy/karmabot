console.log("üîß Loading webhooks module...");
// server/routes/webhooks.ts
import { Router } from "express";
import { createHash } from "crypto";
import { subscriptionService } from "../services/subscriptionService.js";
import { storage } from "../storage.js";
// import { bot } from "../bot/index.js"; // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
import { getGreeting } from "../telegram-bot.js";

const router = Router();

// WayForPay webhook handler
router.post("/wayforpay", async (req, res) => {
  try {
    console.log("üîî WayForPay webhook received:", req.body);

    const {
      merchantSignature,
      orderReference,
      amount,
      currency,
      authCode,
      transactionStatus,
      reasonCode,
      merchantAccount,
    } = req.body;

    // Verify signature
    const signString = [
      merchantAccount,
      orderReference,
      amount,
      currency,
      authCode,
      transactionStatus,
      reasonCode,
    ].join(";");

    const expectedSignature = createHash("md5")
      .update(signString + ";" + process.env.WAYFORPAY_SECRET)
      .digest("hex");

    if (merchantSignature !== expectedSignature) {
      console.error("‚ùå Invalid WayForPay signature");
      return res
        .status(400)
        .json({ status: "error", message: "Invalid signature" });
    }

    // Handle successful payment
    if (transactionStatus === "Approved") {
      try {
        // Activate subscription
        const subscription =
          await subscriptionService.activateSubscription(orderReference);
        console.log("‚úÖ Subscription activated:", subscription);

        // Get user for Telegram notification
        const user = await storage.getUserById(subscription.userId);

        if (user && user.telegramId) {
          await sendPaymentSuccessNotification(user, subscription);
        }

        // Respond to WayForPay
        res.json({
          orderReference,
          status: "accept",
          time: Math.floor(Date.now() / 1000),
        });
      } catch (error) {
        console.error("‚ùå Error activating subscription:", error);
        res.status(500).json({
          status: "error",
          message: "Failed to activate subscription",
        });
      }
    } else {
      console.log("‚ùå Payment not approved:", transactionStatus, reasonCode);
      res.json({
        orderReference,
        status: "decline",
        time: Math.floor(Date.now() / 1000),
      });
    }
  } catch (error) {
    console.error("‚ùå Webhook error:", error);
    res.status(500).json({ status: "error", message: "Internal server error" });
  }
});

// Send payment success notification to Telegram
async function sendPaymentSuccessNotification(user: any, subscription: any) {
  try {
    const planNames = {
      light: "üåü –ö–∞—Ä–º–∞ –õ–∞–π—Ç",
      plus: "‚≠ê –ö–∞—Ä–º–∞ –ü–ª—é—Å",
      pro: "üíé –ö–∞—Ä–º–∞ –ü—Ä–æ",
    };

    const planName = planNames[subscription.plan] || subscription.plan;
    const greeting = getGreeting(user.firstName || "–¥—Ä—É–∂–µ");

    const features = {
      light: [
        "üìä –†–æ–∑—à–∏—Ä–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "üèÜ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è",
        "üì§ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö",
        "üì± Telegram –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è",
      ],
      plus: [
        "üìä –ü–æ–≤–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "ü§ñ AI-–ø–æ—Ä–∞–¥–∏ (5/–º—ñ—Å—è—Ü—å)",
        "üèÜ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Ç–∞ –≥–µ–π–º–∏—Ñ—ñ–∫–∞—Ü—ñ—è",
        "üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ—é",
        "üì§ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö",
      ],
      pro: [
        "üöÄ –í—Å–µ –∑ –ü–ª—é—Å",
        "üí¨ –ù–µ–æ–±–º–µ–∂–µ–Ω–∏–π AI-—á–∞—Ç",
        "üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —ñ–Ω—Å–∞–π—Ç–∏",
        "‚≠ê –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞",
        "üîÆ –ï–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó",
      ],
    };

    const planFeatures = features[subscription.plan] || [];
    const endDate = new Date(subscription.endDate).toLocaleDateString("uk-UA");

    const message =
      `${greeting}\n\n` +
      `üéâ –ü—ñ–¥–ø–∏—Å–∫–∞ —É—Å–ø—ñ—à–Ω–æ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞!\n\n` +
      `üíé –ü–ª–∞–Ω: ${planName}\n` +
      `üí∞ –°—É–º–∞: ${subscription.amount} ${subscription.currency}\n` +
      `üìÖ –î—ñ—î –¥–æ: ${endDate}\n\n` +
      `üåü –í–∞—à—ñ –Ω–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ:\n` +
      planFeatures.map((feature) => `‚Ä¢ ${feature}`).join("\n") +
      `\n\nüöÄ –ü–æ—á–Ω—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –Ω–æ–≤–∏–º–∏ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑!`;

    // await bot.sendMessage(user.telegramId, message, { // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
    console.log('üì® Would send Telegram notification:', message);

    // Send additional message for Pro users about AI chat
    if (subscription.plan === "pro") {
      setTimeout(async () => {
        // await bot.sendMessage(
        //   user.telegramId,
        //   `ü§ñ –¢–µ–ø–µ—Ä –≤–∏ –º–∞—î—Ç–µ –¥–æ—Å—Ç—É–ø –¥–æ –Ω–µ–æ–±–º–µ–∂–µ–Ω–æ–≥–æ AI-—á–∞—Ç—É!\n\n` +
        //     `–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è, —ñ —è –¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –ø–æ—Ä–∞–¥—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–æ–≥–æ —â–æ–¥–µ–Ω–Ω–∏–∫–∞.\n\n` +
        //     `–°–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ –∑–∞—Ä–∞–∑! üí¨`,
        //   {
        //     reply_markup: {
        //       inline_keyboard: [
        //         [{ text: "üí° –û—Ç—Ä–∏–º–∞—Ç–∏ AI-–ø–æ—Ä–∞–¥—É", callback_data: "ai_advice" }],
        //       ],
        //     },
        //   },
        // ); // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
      }, 2000);
    }
  } catch (error) {
    console.error("‚ùå Error sending Telegram notification:", error);
  }
}
console.log(
  "üîß Webhooks router created with routes:",
  router.stack?.length || "unknown",
);
export default router;
