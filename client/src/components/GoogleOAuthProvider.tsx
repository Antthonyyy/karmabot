import { GoogleOAuthProvider as GoogleProvider } from '@react-oauth/google';
import { useEffect, useState } from 'react';

interface GoogleOAuthProviderProps {
  children: React.ReactNode;
}

export default function GoogleOAuthProvider({ children }: GoogleOAuthProviderProps) {
  const [hasClientId, setHasClientId] = useState(false);
  const [clientId, setClientId] = useState<string>('');
  
  useEffect(() => {
    // –ü–æ–ª—É—á–∞–µ–º client ID –∏–∑ window –∏–ª–∏ env
    const id = (window as any).GOOGLE_CLIENT_ID || import.meta.env.VITE_GOOGLE_CLIENT_ID;
    
    console.log('üîç Google OAuth Debug:', {
      windowId: (window as any).GOOGLE_CLIENT_ID,
      envId: import.meta.env.VITE_GOOGLE_CLIENT_ID,
      finalId: id,
      isPlaceholder: id === 'YOUR_GOOGLE_CLIENT_ID',
      length: id ? id.length : 0
    });
    
    if (id && id.length > 20 && id !== 'YOUR_GOOGLE_CLIENT_ID') {
      setClientId(id);
      setHasClientId(true);
      console.log('‚úÖ Google Client ID configured');
    } else {
      console.warn('‚ùå Google Client ID not found or invalid, Google OAuth disabled');
      setHasClientId(false);
    }
  }, []);

  // –ï—Å–ª–∏ client ID –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–µ–Ω–¥–µ—Ä–∏–º children –±–µ–∑ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  // –Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  if (!hasClientId || !clientId) {
    (window as any).GOOGLE_OAUTH_DISABLED = true;
    return <>{children}</>;
  }
  
  (window as any).GOOGLE_OAUTH_DISABLED = false;

  return (
    <GoogleProvider clientId={clientId}>
      {children}
    </GoogleProvider>
  );
}