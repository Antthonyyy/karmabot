# Задача: Создать продвинутую систему напоминаний с множественными принципами

## Что нужно сделать:

### 1. Обновить схему базы данных `/shared/schema.ts`:

```typescript
// Обновить таблицу users
export const users = sqliteTable('users', {
  // ... существующие поля ...
  
  // Режим напоминаний
  reminderMode: text('reminder_mode').default('balanced'), // 'intensive', 'balanced', 'light', 'custom'
  dailyPrinciplesCount: integer('daily_principles_count').default(2), // Количество принципов в день
  
  // Удалить старые поля morningReminderTime и eveningReminderTime
});

// Новая таблица для расписания напоминаний
export const reminderSchedules = sqliteTable('reminder_schedules', {
  id: integer('id').primaryKey({ autoIncrement: true }),
  userId: integer('user_id').notNull().references(() => users.id),
  time: text('time').notNull(), // Время в формате HH:MM
  type: text('type').notNull(), // 'principle' или 'reflection'
  enabled: integer('enabled', { mode: 'boolean' }).default(true),
  createdAt: timestamp('created_at').defaultNow(),
});

// Обновить userPrinciples для поддержки нескольких принципов в день
export const userPrinciples = sqliteTable('user_principles', {
  // ... существующие поля ...
  principleOrder: integer('principle_order').default(1), // Порядковый номер принципа за день
  reminderTime: text('reminder_time'), // Время, когда был отправлен принцип
});
```

### 2. Создать компонент выбора режима напоминаний `/src/components/ReminderModeSelector.tsx`:

```typescript
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Clock, Zap, Battery, Feather, Settings } from "lucide-react";

interface ReminderMode {
  id: string;
  name: string;
  description: string;
  principlesPerDay: number;
  schedule: { time: string; type: 'principle' | 'reflection' }[];
  icon: React.ReactNode;
  color: string;
}

const reminderModes: ReminderMode[] = [
  {
    id: 'intensive',
    name: 'Інтенсивний',
    description: 'Максимальна практика з 4 принципами щодня',
    principlesPerDay: 4,
    schedule: [
      { time: '07:00', type: 'principle' },
      { time: '11:00', type: 'principle' },
      { time: '15:00', type: 'principle' },
      { time: '19:00', type: 'principle' },
      { time: '21:00', type: 'reflection' },
    ],
    icon: <Zap className="h-5 w-5" />,
    color: 'bg-red-100 text-red-700 border-red-200',
  },
  {
    id: 'balanced',
    name: 'Збалансований',
    description: '2-3 принципи щодня для стабільного прогресу',
    principlesPerDay: 3,
    schedule: [
      { time: '08:00', type: 'principle' },
      { time: '13:00', type: 'principle' },
      { time: '18:00', type: 'principle' },
      { time: '21:00', type: 'reflection' },
    ],
    icon: <Battery className="h-5 w-5" />,
    color: 'bg-green-100 text-green-700 border-green-200',
  },
  {
    id: 'light',
    name: 'Легкий',
    description: '2 принципи щодня для початківців',
    principlesPerDay: 2,
    schedule: [
      { time: '09:00', type: 'principle' },
      { time: '15:00', type: 'principle' },
      { time: '20:00', type: 'reflection' },
    ],
    icon: <Feather className="h-5 w-5" />,
    color: 'bg-blue-100 text-blue-700 border-blue-200',
  },
  {
    id: 'custom',
    name: 'Власний',
    description: 'Налаштуйте розклад під себе',
    principlesPerDay: 0,
    schedule: [],
    icon: <Settings className="h-5 w-5" />,
    color: 'bg-purple-100 text-purple-700 border-purple-200',
  },
];

interface ReminderModeSelectorProps {
  selectedMode: string;
  onModeSelect: (mode: string) => void;
}

export default function ReminderModeSelector({ selectedMode, onModeSelect }: ReminderModeSelectorProps) {
  return (
    <div className="grid gap-4 md:grid-cols-2">
      {reminderModes.map((mode) => (
        <Card
          key={mode.id}
          className={`cursor-pointer transition-all hover:shadow-lg ${
            selectedMode === mode.id ? 'ring-2 ring-purple-600' : ''
          }`}
          onClick={() => onModeSelect(mode.id)}
        >
          <CardContent className="p-6">
            <div className="flex items-start justify-between mb-3">
              <div className={`p-2 rounded-lg ${mode.color}`}>
                {mode.icon}
              </div>
              {selectedMode === mode.id && (
                <Badge variant="secondary">Обрано</Badge>
              )}
            </div>
            
            <h3 className="font-semibold text-lg mb-2">{mode.name}</h3>
            <p className="text-sm text-gray-600 mb-4">{mode.description}</p>
            
            {mode.id !== 'custom' && (
              <div className="space-y-2">
                <div className="flex items-center gap-2 text-sm">
                  <Clock className="h-4 w-4 text-gray-400" />
                  <span className="font-medium">{mode.principlesPerDay} принципи щодня</span>
                </div>
                <div className="text-xs text-gray-500">
                  Нагадування: {mode.schedule.map(s => s.time).join(', ')}
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      ))}
    </div>
  );
}
```

### 3. Создать компонент кастомного расписания `/src/components/CustomScheduleEditor.tsx`:

```typescript
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Switch } from "@/components/ui/switch";
import { Plus, Trash2, Clock } from "lucide-react";

interface ScheduleItem {
  time: string;
  type: 'principle' | 'reflection';
  enabled: boolean;
}

interface CustomScheduleEditorProps {
  schedule: ScheduleItem[];
  onChange: (schedule: ScheduleItem[]) => void;
  principlesCount: number;
  onPrinciplesCountChange: (count: number) => void;
}

export default function CustomScheduleEditor({ 
  schedule, 
  onChange, 
  principlesCount,
  onPrinciplesCountChange 
}: CustomScheduleEditorProps) {
  const addScheduleItem = () => {
    const newItem: ScheduleItem = {
      time: '12:00',
      type: 'principle',
      enabled: true,
    };
    onChange([...schedule, newItem]);
  };
  
  const removeScheduleItem = (index: number) => {
    onChange(schedule.filter((_, i) => i !== index));
  };
  
  const updateScheduleItem = (index: number, updates: Partial<ScheduleItem>) => {
    const newSchedule = [...schedule];
    newSchedule[index] = { ...newSchedule[index], ...updates };
    onChange(newSchedule);
  };
  
  const principleReminders = schedule.filter(s => s.type === 'principle').length;
  
  return (
    <Card>
      <CardHeader>
        <CardTitle className="text-lg">Налаштування власного розкладу</CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Кількість принципів */}
        <div className="space-y-2">
          <Label>Скільки принципів на день ви хочете практикувати?</Label>
          <Select
            value={principlesCount.toString()}
            onValueChange={(value) => onPrinciplesCountChange(parseInt(value))}
          >
            <SelectTrigger>
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="2">2 принципи (мінімум)</SelectItem>
              <SelectItem value="3">3 принципи</SelectItem>
              <SelectItem value="4">4 принципи</SelectItem>
              <SelectItem value="5">5 принципів</SelectItem>
              <SelectItem value="6">6 принципів (максимум)</SelectItem>
            </SelectContent>
          </Select>
        </div>
        
        {/* Попередження про кількість */}
        {principleReminders < principlesCount && (
          <div className="bg-yellow-50 p-3 rounded-lg text-sm text-yellow-800">
            ⚠️ Додайте ще {principlesCount - principleReminders} нагадування для принципів
          </div>
        )}
        
        {/* Список нагадувань */}
        <div className="space-y-3">
          <div className="flex items-center justify-between">
            <Label>Розклад нагадувань</Label>
            <Button
              size="sm"
              variant="outline"
              onClick={addScheduleItem}
              className="h-8"
            >
              <Plus className="h-4 w-4 mr-1" />
              Додати
            </Button>
          </div>
          
          {schedule.length === 0 && (
            <div className="text-center py-8 text-gray-500">
              Натисніть "Додати" щоб створити нагадування
            </div>
          )}
          
          {schedule.map((item, index) => (
            <div key={index} className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
              <Clock className="h-4 w-4 text-gray-400" />
              
              <Input
                type="time"
                value={item.time}
                onChange={(e) => updateScheduleItem(index, { time: e.target.value })}
                className="w-32"
              />
              
              <Select
                value={item.type}
                onValueChange={(value: 'principle' | 'reflection') => 
                  updateScheduleItem(index, { type: value })
                }
              >
                <SelectTrigger className="w-40">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="principle">Новий принцип</SelectItem>
                  <SelectItem value="reflection">Рефлексія</SelectItem>
                </SelectContent>
              </Select>
              
              <Switch
                checked={item.enabled}
                onCheckedChange={(enabled) => updateScheduleItem(index, { enabled })}
              />
              
              <Button
                size="sm"
                variant="ghost"
                onClick={() => removeScheduleItem(index)}
                className="h-8 w-8 p-0 text-red-600"
              >
                <Trash2 className="h-4 w-4" />
              </Button>
            </div>
          ))}
        </div>
        
        {/* Рекомендації */}
        <div className="bg-blue-50 p-4 rounded-lg">
          <h4 className="font-medium text-sm text-blue-900 mb-2">Рекомендації:</h4>
          <ul className="text-sm text-blue-700 space-y-1">
            <li>• Розподіліть нагадування рівномірно протягом дня</li>
            <li>• Додайте рефлексію ввечері для підведення підсумків</li>
            <li>• Починайте з 2-3 принципів і збільшуйте поступово</li>
          </ul>
        </div>
      </CardContent>
    </Card>
  );
}
```

### 4. Обновить OnboardingPage для использования новых компонентов:

```typescript
// Добавить импорты
import ReminderModeSelector from "@/components/ReminderModeSelector";
import CustomScheduleEditor from "@/components/CustomScheduleEditor";

// Обновить состояние
const [reminderMode, setReminderMode] = useState('balanced');
const [customSchedule, setCustomSchedule] = useState<ScheduleItem[]>([]);
const [principlesCount, setPrinciplesCount] = useState(2);

// Обновить handleComplete
const handleComplete = async () => {
  setIsSaving(true);
  try {
    // Сохраняем режим и расписание
    await apiRequest("POST", "/api/user/setup-reminders", {
      mode: reminderMode,
      principlesCount,
      customSchedule: reminderMode === 'custom' ? customSchedule : undefined,
    });
    
    // ... остальной код
  } catch (error) {
    // ... обработка ошибок
  }
};

// Добавить новые шаги в onboarding:
// Шаг 2: Выбор режима
{step === 2 && (
  <div className="space-y-6">
    <div className="text-center mb-6">
      <h3 className="text-lg font-semibold mb-2">Оберіть режим практики</h3>
      <p className="text-sm text-gray-600">
        Скільки принципів ви хочете практикувати щодня?
      </p>
    </div>
    
    <ReminderModeSelector
      selectedMode={reminderMode}
      onModeSelect={setReminderMode}
    />
    
    <div className="flex gap-3">
      <Button variant="outline" onClick={() => setStep(1)} className="flex-1">
        Назад
      </Button>
      <Button 
        onClick={() => {
          if (reminderMode === 'custom') {
            setStep(3); // Переход к настройке расписания
          } else {
            setStep(4); // Переход к завершению
          }
        }} 
        className="flex-1"
      >
        Далі
        <ChevronRight className="ml-2 h-4 w-4" />
      </Button>
    </div>
  </div>
)}

// Шаг 3: Кастомное расписание (только для custom режима)
{step === 3 && reminderMode === 'custom' && (
  <div className="space-y-6">
    <CustomScheduleEditor
      schedule={customSchedule}
      onChange={setCustomSchedule}
      principlesCount={principlesCount}
      onPrinciplesCountChange={setPrinciplesCount}
    />
    
    <div className="flex gap-3">
      <Button variant="outline" onClick={() => setStep(2)} className="flex-1">
        Назад
      </Button>
      <Button 
        onClick={() => setStep(4)}
        disabled={customSchedule.filter(s => s.type === 'principle').length < principlesCount}
        className="flex-1"
      >
        Далі
        <ChevronRight className="ml-2 h-4 w-4" />
      </Button>
    </div>
  </div>
)}
```

### 5. Создать API endpoint для настройки напоминаний:

```javascript
app.post('/api/user/setup-reminders', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    const { mode, principlesCount, customSchedule } = req.body;
    
    // Обновляем настройки пользователя
    await db.update(users)
      .set({
        reminderMode: mode,
        dailyPrinciplesCount: principlesCount,
        remindersEnabled: true,
      })
      .where(eq(users.id, userId));
    
    // Удаляем старые расписания
    await db.delete(reminderSchedules).where(eq(reminderSchedules.userId, userId));
    
    // Создаем новые расписания
    let scheduleToSave = [];
    
    if (mode === 'custom' && customSchedule) {
      scheduleToSave = customSchedule;
    } else {
      // Используем предустановленные расписания
      const presetSchedules = {
        intensive: [
          { time: '07:00', type: 'principle' },
          { time: '11:00', type: 'principle' },
          { time: '15:00', type: 'principle' },
          { time: '19:00', type: 'principle' },
          { time: '21:00', type: 'reflection' },
        ],
        balanced: [
          { time: '08:00', type: 'principle' },
          { time: '13:00', type: 'principle' },
          { time: '18:00', type: 'principle' },
          { time: '21:00', type: 'reflection' },
        ],
        light: [
          { time: '09:00', type: 'principle' },
          { time: '15:00', type: 'principle' },
          { time: '20:00', type: 'reflection' },
        ],
      };
      
      scheduleToSave = presetSchedules[mode] || [];
    }
    
    // Сохраняем расписания
    for (const schedule of scheduleToSave) {
      await db.insert(reminderSchedules).values({
        userId,
        time: schedule.time,
        type: schedule.type,
        enabled: schedule.enabled !== false,
      });
    }
    
    res.json({ success: true });
  } catch (error) {
    console.error('Error setting up reminders:', error);
    res.status(500).json({ error: 'Failed to setup reminders' });
  }
});
```

### 6. Обновить reminder-service.js для поддержки множественных принципов:

```javascript
// Обновить функцию checkAndSendReminders
async function checkAndSendReminders() {
  const now = new Date();
  const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
  
  try {
    // Получаем все активные расписания на текущее время
    const schedulesToSend = await db
      .select({
        schedule: reminderSchedules,
        user: users,
      })
      .from(reminderSchedules)
      .innerJoin(users, eq(reminderSchedules.userId, users.id))
      .where(
        and(
          eq(reminderSchedules.time, currentTime),
          eq(reminderSchedules.enabled, true),
          eq(users.remindersEnabled, true)
        )
      );
    
    for (const { schedule, user } of schedulesToSend) {
      if (schedule.type === 'principle') {
        // Проверяем, сколько принципов уже было отправлено сегодня
        const today = new Date().toISOString().split('T')[0];
        const todaysPrinciples = await db
          .select()
          .from(userPrinciples)
          .where(
            and(
              eq(userPrinciples.userId, user.id),
              sql`DATE(${userPrinciples.createdAt}) = ${today}`
            )
          );
        
        const principleOrder = todaysPrinciples.length + 1;
        
        // Отправляем новый принцип с указанием номера
        await sendPrincipleReminder(user, principleOrder);
      } else if (schedule.type === 'reflection') {
        // Отправляем напоминание о рефлексии
        await sendReflectionReminder(user);
      }
    }
  } catch (error) {
    console.error('Error checking reminders:', error);
  }
}

// Обновить функцию отправки принципа
async function sendPrincipleReminder(user, principleOrder) {
  try {
    const principle = await getRandomPrinciple(user.id);
    if (!principle) return;
    
    // Сохраняем принцип с порядковым номером
    await db.insert(userPrinciples).values({
      userId: user.id,
      principleId: principle.id,
      principleOrder,
      reminderTime: new Date().toISOString().split('T')[1].substring(0, 5),
      completed: false,
    });
    
    const emoji = principleOrder === 1 ? '🌅' : principleOrder === 2 ? '☀️' : principleOrder === 3 ? '🌤️' : '🌙';
    
    const message = `${emoji} Принцип #${principleOrder} на сьогодні\n\n` +
      `<b>"${principle.title}"</b>\n\n` +
      `<i>${principle.description}</i>\n\n` +
      `Це ваш ${principleOrder}-й принцип з ${user.dailyPrinciplesCount} на сьогодні.\n\n` +
      `🔗 <a href="https://your-app-url.replit.app/dashboard">Детальніше</a>`;
    
    await bot.sendMessage(user.telegramId, message, {
      parse_mode: 'HTML',
      disable_web_page_preview: true,
    });
    
    console.log(`Principle #${principleOrder} sent to ${user.firstName}`);
  } catch (error) {
    console.error(`Error sending principle reminder:`, error);
  }
}

// Новая функция для рефлексии по всем принципам дня
async function sendReflectionReminder(user) {
  try {
    const today = new Date().toISOString().split('T')[0];
    const todaysPrinciples = await db
      .select({
        principle: principles,
        userPrinciple: userPrinciples,
      })
      .from(userPrinciples)
      .innerJoin(principles, eq(userPrinciples.principleId, principles.id))
      .where(
        and(
          eq(userPrinciples.userId, user.id),
          sql`DATE(${userPrinciples.createdAt}) = ${today}`
        )
      )
      .orderBy(userPrinciples.principleOrder);
    
    if (todaysPrinciples.length === 0) return;
    
    let message = `🌙 Час підвести підсумки дня!\n\n`;
    message += `Сьогодні ви практикували ${todaysPrinciples.length} принципи:\n\n`;
    
    todaysPrinciples.forEach((item, index) => {
      message += `${index + 1}. "${item.principle.title}"\n`;
    });
    
    message += `\nОцініть виконання кожного принципу:\n`;
    message += `💚 /completed_all - Виконав усі\n`;
    message += `💛 /partial_all - Частково виконав\n`;
    message += `❤️ /review_each - Оцінити кожен окремо\n\n`;
    message += `🔗 <a href="https://your-app-url.replit.app/analytics">Переглянути статистику</a>`;
    
    await bot.sendMessage(user.telegramId, message, {
      parse_mode: 'HTML',
      disable_web_page_preview: true,
    });
    
    console.log(`Reflection reminder sent to ${user.firstName}`);
  } catch (error) {
    console.error(`Error sending reflection reminder:`, error);
  }
}
```

## Результат:

1. **🎯 Готовые режимы:**
   - Интенсивный (4 принципа)
   - Сбалансированный (3 принципа) 
   - Легкий (2 принципа)
   - Кастомный (2-6 принципов)

2. **⚙️ Гибкая настройка:**
   - Точное время до минуты
   - Количество принципов от 2 до 6
   - Включение/выключение отдельных напоминаний

3. **📊 Улучшенная практика:**
   - Несколько принципов в день
   - Вечерняя рефлексия по всем принципам
   - Отслеживание прогресса по каждому

4. **🎨 Красивый UI:**
   - Наглядные карточки режимов
   - Удобный редактор расписания
   - Подсказки и рекомендации