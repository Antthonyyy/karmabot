# –ó–∞–¥–∞—á–∞: –î–æ–±–∞–≤–∏—Ç—å Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

## –í–∞–∂–Ω–æ! –£ –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å:
- ‚úÖ Telegram –±–æ—Ç —Å–æ–∑–¥–∞–Ω: @karmics_diary_bot
- ‚úÖ Bot Token: 8034922821:AAEBc1Iw-bv33Wx-VpudozESPJVsX3FCKwA
- ‚úÖ –ë–æ—Ç —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ BotFather
- ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —Ç–µ–∫—É—â–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –≤–∏–¥–∂–µ—Ç

## –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:

### 1. –°–æ–∑–¥–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —Å–µ—Å—Å–∏–π –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:
–°–æ–∑–¥–∞–π —Ñ–∞–π–ª `/server/auth-sessions.js`:
```javascript
// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π (–ø–æ–∑–∂–µ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Redis)
const sessions = new Map();

export function createSession() {
  const sessionId = Math.random().toString(36).substring(7);
  sessions.set(sessionId, {
    created: Date.now(),
    authorized: false
  });
  
  // –£–¥–∞–ª–∏—Ç—å —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
  setTimeout(() => sessions.delete(sessionId), 600000);
  
  return sessionId;
}

export function authorizeSession(sessionId, userData) {
  const session = sessions.get(sessionId);
  if (session) {
    session.authorized = true;
    session.userData = userData;
    return true;
  } else {
    console.warn(`Attempted to authorize non-existent session: ${sessionId}`);
    return false;
  }
}

export function checkSession(sessionId) {
  const session = sessions.get(sessionId);
  if (!session) {
    return null;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è (10 –º–∏–Ω—É—Ç)
  if (Date.now() - session.created > 600000) {
    sessions.delete(sessionId);
    return null;
  }
  
  return session;
}

export function deleteSession(sessionId) {
  sessions.delete(sessionId);
}
```

### 2. –°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–æ—Ç–∞:
–°–æ–∑–¥–∞–π —Ñ–∞–π–ª `/server/telegram-bot.js`:
```javascript
import TelegramBot from 'node-telegram-bot-api';
import { authorizeSession } from './auth-sessions.js';

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const token = '8034922821:AAEBc1Iw-bv33Wx-VpudozESPJVsX3FCKwA';

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(token, { polling: true });

// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
bot.on('polling_error', (error) => {
  console.error('Telegram bot polling error:', error);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º auth_SESSION_ID
bot.onText(/\/start auth_(.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const sessionId = match[1];
  const user = msg.from;
  
  // –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º —Å–µ—Å—Å–∏—é
  const success = authorizeSession(sessionId, {
    telegramId: user.id.toString(),
    firstName: user.first_name,
    lastName: user.last_name || null,
    username: user.username || null
  });
  
  if (success) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.sendMessage(chatId, 
      "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!\n\n" +
      "–ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç –ö–∞—Ä–º—ñ—á–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–∫.\n" +
      "–í—ñ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –æ–Ω–æ–≤–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.",
      {
        parse_mode: 'HTML'
      }
    );
  } else {
    // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞
    await bot.sendMessage(chatId,
      "‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó\n\n" +
      "–°–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞.\n" +
      "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –Ω–∞ —Å–∞–π—Ç—ñ.",
      {
        parse_mode: 'HTML'
      }
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã /start (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
bot.onText(/^\/start$/, async (msg) => {
  const chatId = msg.chat.id;
  await bot.sendMessage(chatId,
    "üëã –í—ñ—Ç–∞—é –≤ –ö–∞—Ä–º—ñ—á–Ω–æ–º—É —â–æ–¥–µ–Ω–Ω–∏–∫—É!\n\n" +
    "–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º:\n" +
    "‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è –Ω–∞ —Å–∞–π—Ç—ñ\n" +
    "‚Ä¢ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø—Ä–∏–Ω—Ü–∏–ø–∏\n\n" +
    "–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –ø–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ —Å–∞–π—Ç —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–£–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram'",
    {
      parse_mode: 'HTML'
    }
  );
});

console.log('Telegram bot started successfully');

export default bot;
```

### 3. –û–±–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞:
–í —Ñ–∞–π–ª –≥–¥–µ —É –≤–∞—Å Express —Å–µ—Ä–≤–µ—Ä (–æ–±—ã—á–Ω–æ `/server/index.js` –∏–ª–∏ `/api/index.js`), –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ:
```javascript
import express from 'express';
import jwt from 'jsonwebtoken';
import { createSession, checkSession, deleteSession } from './auth-sessions.js';
import './telegram-bot.js'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞

// ... –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...

// JWT —Å–µ–∫—Ä–µ—Ç (–ª—É—á—à–µ –±—Ä–∞—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-here';

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.post('/api/auth/telegram/start-session', (req, res) => {
  try {
    const sessionId = createSession();
    res.json({ sessionId });
  } catch (error) {
    console.error('Error creating session:', error);
    res.status(500).json({ error: 'Failed to create session' });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏
app.get('/api/auth/check-session/:sessionId', async (req, res) => {
  try {
    const { sessionId } = req.params;
    const session = checkSession(sessionId);
    
    if (!session || !session.authorized) {
      return res.json({ authorized: false });
    }
    
    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const token = jwt.sign({
      id: session.userData.telegramId,
      telegramId: session.userData.telegramId,
      firstName: session.userData.firstName,
      username: session.userData.username
    }, JWT_SECRET, { expiresIn: '30d' });
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    // const user = await saveUserToDatabase(session.userData);
    
    // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    deleteSession(sessionId);
    
    res.json({
      authorized: true,
      token,
      user: {
        id: session.userData.telegramId,
        telegramId: session.userData.telegramId,
        firstName: session.userData.firstName,
        lastName: session.userData.lastName,
        username: session.userData.username,
        telegramConnected: true
      }
    });
  } catch (error) {
    console.error('Error checking session:', error);
    res.status(500).json({ error: 'Failed to check session' });
  }
});
```

### 4. –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç TelegramLoginButton.tsx:
–ó–∞–º–µ–Ω–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ `/src/components/TelegramLoginButton.tsx`:
```typescript
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { Loader2 } from "lucide-react";

interface TelegramLoginButtonProps {
  onAuthSuccess: () => void;
}

export default function TelegramLoginButton({ onAuthSuccess }: TelegramLoginButtonProps) {
  const [isChecking, setIsChecking] = useState(false);
  const [sessionId, setSessionId] = useState<string | null>(null);
  const { toast } = useToast();
  const BOT_USERNAME = "karmics_diary_bot";
  
  const handleTelegramLogin = async () => {
    try {
      // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
      const response = await apiRequest("POST", "/api/auth/telegram/start-session");
      const data = await response.json();
      
      if (!data.sessionId) {
        throw new Error("Failed to create session");
      }
      
      setSessionId(data.sessionId);
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º Telegram
      const telegramUrl = `https://t.me/${BOT_USERNAME}?start=auth_${data.sessionId}`;
      window.open(telegramUrl, '_blank');
      
      // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞
      setIsChecking(true);
      checkAuthStatus(data.sessionId);
      
    } catch (error) {
      console.error("Error starting session:", error);
      toast({
        title: "–ü–æ–º–∏–ª–∫–∞",
        description: "–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
        variant: "destructive"
      });
    }
  };
  
  const checkAuthStatus = (currentSessionId: string) => {
    let attempts = 0;
    const maxAttempts = 150; // 5 –º–∏–Ω—É—Ç (150 * 2 —Å–µ–∫—É–Ω–¥—ã)
    
    const checkInterval = setInterval(async () => {
      attempts++;
      
      try {
        const response = await fetch(`/api/auth/check-session/${currentSessionId}`);
        
        if (!response.ok) {
          throw new Error('Failed to check session');
        }
        
        const data = await response.json();
        
        if (data.authorized && data.token && data.user) {
          // –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
          clearInterval(checkInterval);
          setIsChecking(false);
          setSessionId(null);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
          localStorage.setItem("karma_token", data.token);
          localStorage.setItem("karma_user", JSON.stringify(data.user));
          
          toast({
            title: "–£—Å–ø—ñ—à–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è!",
            description: `–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, ${data.user.firstName}!`,
          });
          
          // –í—ã–∑—ã–≤–∞–µ–º callback
          onAuthSuccess();
        }
      } catch (error) {
        console.error("Error checking auth status:", error);
      }
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫
      if (attempts >= maxAttempts) {
        clearInterval(checkInterval);
        setIsChecking(false);
        setSessionId(null);
        
        toast({
          title: "–ß–∞—Å –≤–∏–π—à–æ–≤",
          description: "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
          variant: "destructive"
        });
      }
    }, 2000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
  };
  
  return (
    <div className="flex flex-col items-center gap-4">
      <Button 
        onClick={handleTelegramLogin}
        disabled={isChecking}
        className="bg-blue-600 hover:bg-blue-700 disabled:opacity-50 text-white px-6 py-3 rounded-lg flex items-center space-x-2 transition-all"
      >
        {isChecking ? (
          <>
            <Loader2 className="h-5 w-5 animate-spin" />
            <span>–û—á—ñ–∫—É—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é...</span>
          </>
        ) : (
          <>
            <svg viewBox="0 0 24 24" className="w-5 h-5" fill="currentColor">
              <path d="M11.944 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0a12 12 0 0 0-.056 0zm4.962 7.224c.1-.002.321.023.465.14a.506.506 0 0 1 .171.325c.016.093.036.306.02.472-.18 1.898-.962 6.502-1.36 8.627-.168.9-.499 1.201-.82 1.23-.696.065-1.225-.46-1.9-.902-1.056-.693-1.653-1.124-2.678-1.8-1.185-.78-.417-1.21.258-1.91.177-.184 3.247-2.977 3.307-3.23.007-.032.014-.15-.056-.212s-.174-.041-.249-.024c-.106.024-1.793 1.14-5.061 3.345-.48.33-.913.49-1.302.48-.428-.008-1.252-.241-1.865-.44-.752-.245-1.349-.374-1.297-.789.027-.216.325-.437.893-.663 3.498-1.524 5.83-2.529 6.998-3.014 3.332-1.386 4.025-1.627 4.476-1.635z"/>
            </svg>
            <span>–£–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram</span>
          </>
        )}
      </Button>
      
      {isChecking && sessionId && (
        <div className="text-center space-y-2">
          <p className="text-sm text-gray-600">
            –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ Telegram —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å <strong>START</strong> —É –±–æ—Ç—ñ
          </p>
          <p className="text-xs text-gray-500">
            @{BOT_USERNAME}
          </p>
          <p className="text-xs text-gray-400">
            –°–µ—Å—ñ—è: {sessionId}
          </p>
        </div>
      )}
    </div>
  );
}
```

### 5. –î–æ–±–∞–≤–∏—Ç—å –≤ package.json:
```json
{
  "dependencies": {
    "node-telegram-bot-api": "^0.64.0"
  }
}
```

### 6. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env):
```
TELEGRAM_BOT_TOKEN=8034922821:AAEBc1Iw-bv33Wx-VpudozESPJVsX3FCKwA
JWT_SECRET=your-very-secret-key-change-this-in-production
```

### 7. –í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
- –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ES6 —Å–∏–Ω—Ç–∞–∫—Å–∏—Å (import/export)
- –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ telegram-bot.js
- –°–µ—Å—Å–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
- –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏—è —É–¥–∞–ª—è–µ—Ç—Å—è —Å—Ä–∞–∑—É
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω—è—Ö
- JWT —Ç–æ–∫–µ–Ω—ã —Å–æ–≤–º–µ—Å—Ç–∏–º—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π

–ü–æ—Å–ª–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç:
1. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–£–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram" –Ω–∞ —Å–∞–π—Ç–µ
2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç @karmics_diary_bot
3. –ù–∞–∂–∞—Ç—å START –≤ –±–æ—Ç–µ
4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π