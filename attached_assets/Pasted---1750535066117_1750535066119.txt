# Реализация последовательной практики принципов

## Задача:
Трансформировать текущую систему случайных принципов в последовательную практику, где все пользователи движутся по принципам от 1 до 10 и обратно к 1.

## Изменения в базе данных:

### 1. Добавить в таблицу `users`:
```sql
ALTER TABLE users ADD COLUMN current_principle INTEGER DEFAULT 1;
ALTER TABLE users ADD COLUMN practice_mode VARCHAR(20) DEFAULT 'sequential';
-- 'sequential' - последовательная практика (по умолчанию)
-- 'custom' - пользовательский выбор (премиум функция)
```

### 2. Создать таблицу истории принципов:
```sql
CREATE TABLE principle_history (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  principle_id INTEGER,
  assigned_at TIMESTAMP DEFAULT NOW(),
  completed BOOLEAN DEFAULT FALSE
);
```

## Изменения в логике напоминаний:

### В `/server/services/reminderService.ts`:

```typescript
// При отправке напоминания о принципе
async function sendPrincipleReminder(user: User, scheduleItem: ScheduleItem) {
  const currentPrinciple = user.current_principle || 1;
  
  // Отправляем напоминание о текущем принципе
  await sendNotification(user, {
    type: 'principle',
    principleId: currentPrinciple,
    message: `Принцип ${currentPrinciple}: ${getPrincipleTitle(currentPrinciple)}`
  });
  
  // ВАЖНО: Атомарно обновляем на следующий принцип
  const nextPrinciple = currentPrinciple === 10 ? 1 : currentPrinciple + 1;
  
  await db.update(users)
    .set({ current_principle: nextPrinciple })
    .where(eq(users.id, user.id));
    
  // Записываем в историю
  await db.insert(principleHistory).values({
    user_id: user.id,
    principle_id: currentPrinciple,
    assigned_at: new Date()
  });
}
```

## Изменения в UI:

### 1. Обновить компонент `TodaysPlan`:
- Показывать принципы в том порядке, в котором они будут приходить
- Выделять текущий принцип пользователя

### 2. Добавить в Dashboard новый блок:
```tsx
// Компонент "Следующий принцип в фокусе"
function NextPrincipleCard({ currentPrinciple }: { currentPrinciple: number }) {
  const nextPrinciple = currentPrinciple === 10 ? 1 : currentPrinciple + 1;
  
  return (
    <Card>
      <CardHeader>
        <CardTitle>Следующий принцип в фокусе</CardTitle>
      </CardHeader>
      <CardContent>
        <h3 className="text-lg font-semibold">
          Принцип {nextPrinciple}: {getPrincipleTitle(nextPrinciple)}
        </h3>
        <p className="text-sm text-gray-600 mt-2">
          {getPrincipleDescription(nextPrinciple)}
        </p>
      </CardContent>
    </Card>
  );
}
```

### 3. Обновить форму записи в дневник:
```tsx
// При создании записи из напоминания
function JournalEntryForm({ suggestedPrinciple }: { suggestedPrinciple?: number }) {
  const [selectedPrinciple, setSelectedPrinciple] = useState(suggestedPrinciple || 1);
  
  return (
    <form>
      {suggestedPrinciple && (
        <Alert>
          <Info className="h-4 w-4" />
          <AlertDescription>
            Вам пришло напоминание о Принципе {suggestedPrinciple}, 
            но вы можете выбрать другой.
          </AlertDescription>
        </Alert>
      )}
      
      <Select value={selectedPrinciple} onValueChange={setSelectedPrinciple}>
        {/* Список всех принципов */}
      </Select>
      
      {/* Остальная форма */}
    </form>
  );
}
```

## Telegram бот:

### Обновить обработку сообщений:
```javascript
bot.on('text', async (ctx) => {
  const user = await getUserByTelegramId(ctx.from.id);
  
  if (!user) {
    return ctx.reply('Пожалуйста, сначала зарегистрируйтесь в веб-приложении');
  }
  
  // Сохраняем запись с текущим принципом пользователя
  await saveJournalEntry({
    userId: user.id,
    principleId: user.current_principle,
    content: ctx.message.text,
    source: 'telegram'
  });
  
  ctx.reply(
    `✅ Запись сохранена! Мы привязали ее к **Принципу ${user.current_principle}**. ` +
    `Если ваш инсайт был о другом, пожалуйста, измените принцип в веб-приложении.`
  );
});
```

## API endpoints:

### Новый endpoint для получения текущего состояния:
```typescript
app.get('/api/user/practice-state', authenticate, async (req, res) => {
  const user = await getUserById(req.userId);
  
  res.json({
    currentPrinciple: user.current_principle,
    practiceMode: user.practice_mode,
    todaysPrinciples: await getTodaysPrinciples(user),
    nextPrinciple: user.current_principle === 10 ? 1 : user.current_principle + 1
  });
});
```

## Миграция существующих пользователей:
```sql
-- Установить всем текущий принцип 1
UPDATE users SET current_principle = 1 WHERE current_principle IS NULL;
```

Эта реализация создаст основу для последовательной практики, где каждый пользователь движется по своему пути от принципа 1 до 10 и обратно.