–î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–π –∏ –∏—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫—É "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞" –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.

1. –î–æ–±–∞–≤—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ `/server/routes/users.ts` –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:
```typescript
router.get("/api/users/profile", authenticate, async (req, res) => {
  try {
    console.log('üîç Getting user profile for ID:', req.user?.id);
    
    if (!req.user?.id) {
      console.error('‚ùå No user ID in request');
      return res.status(401).json({ error: "Unauthorized" });
    }
    
    const user = await db.query.users.findFirst({
      where: eq(users.id, req.user.id),
    });
    
    console.log('üë§ Found user:', user ? 'Yes' : 'No');
    console.log('üìä User data:', JSON.stringify(user, null, 2));
    
    if (!user) {
      console.error('‚ùå User not found in database');
      return res.status(404).json({ error: "User not found" });
    }
    
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
    const userResponse = {
      id: user.id,
      email: user.email,
      name: user.name,
      telegramId: user.telegramId,
      onboardingCompleted: user.onboardingCompleted ?? false,
      notificationsEnabled: user.notificationsEnabled ?? true,
      subscription: user.subscription ?? 'none',
      subscriptionStartDate: user.subscriptionStartDate,
      subscriptionEndDate: user.subscriptionEndDate,
      preferredLanguage: user.preferredLanguage ?? 'uk',
      createdAt: user.createdAt
    };
    
    console.log('‚úÖ Sending user response:', userResponse);
    res.json(userResponse);
  } catch (error) {
    console.error("‚ùå Error fetching user profile:", error);
    console.error("Stack trace:", error.stack);
    res.status(500).json({ error: "Failed to fetch user profile", details: error.message });
  }
});

–ü—Ä–æ–≤–µ—Ä—å middleware –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ /server/middleware/auth.ts:

typescriptexport const authenticate = async (req: any, res: any, next: any) => {
  try {
    const authHeader = req.headers.authorization;
    console.log('üîê Auth header:', authHeader ? 'Present' : 'Missing');
    
    if (!authHeader) {
      console.error('‚ùå No authorization header');
      return res.status(401).json({ error: "No authorization header" });
    }
    
    const token = authHeader.split(" ")[1];
    if (!token) {
      console.error('‚ùå No token in authorization header');
      return res.status(401).json({ error: "No token provided" });
    }
    
    console.log('üîë Verifying token...');
    const decoded = jwt.verify(token, process.env.JWT_SECRET!);
    console.log('‚úÖ Token verified, user ID:', decoded.userId);
    
    req.user = { id: decoded.userId };
    next();
  } catch (error) {
    console.error("‚ùå Authentication error:", error.message);
    return res.status(401).json({ error: "Invalid token", details: error.message });
  }
};

–î–æ–±–∞–≤—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –≤ /server/db/index.ts:

typescript// –î–æ–±–∞–≤—å –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è db
export async function testConnection() {
  try {
    console.log('üîå Testing database connection...');
    const result = await db.select().from(users).limit(1);
    console.log('‚úÖ Database connection successful');
    console.log(`üìä Found ${result.length} users in database`);
    return true;
  } catch (error) {
    console.error('‚ùå Database connection failed:', error);
    return false;
  }
}

// –í—ã–∑–æ–≤–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
testConnection();

–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –≤—Å–µ —Ä–æ—É—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –≤ /server/index.ts:

typescript// –£–±–µ–¥–∏—Å—å, —á—Ç–æ –µ—Å—Ç—å —ç—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
import userRoutes from "./routes/users";

// –ü–æ—Å–ª–µ app.use(express.json())
app.use(userRoutes);

// –î–æ–±–∞–≤—å –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((err: any, req: any, res: any, next: any) => {
  console.error('üö® Global error handler:', err);
  res.status(500).json({ 
    error: 'Internal server error', 
    message: err.message,
    stack: process.env.NODE_ENV === 'development' ? err.stack : undefined
  });
});

–û–±–Ω–æ–≤–∏ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–∫–∏ –≤ /client/src/pages/DashboardPage.tsx:

typescriptconst { data: user, error: userError, isLoading: userLoading } = useQuery({
  queryKey: ["user"],
  queryFn: async () => {
    try {
      const response = await fetch("/api/users/profile", {
        headers: authUtils.getAuthHeaders(),
      });
      
      console.log('Response status:', response.status);
      console.log('Response headers:', response.headers);
      
      if (!response.ok) {
        const errorData = await response.json();
        console.error('Error response:', errorData);
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('User data received:', data);
      return data;
    } catch (error) {
      console.error('Fetch error:', error);
      throw error;
    }
  },
  retry: 1,
});

// –î–æ–±–∞–≤—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
if (userError) {
  return (
    <div className="p-8">
      <Card className="bg-red-50 border-red-200">
        <CardContent className="pt-6">
          <h2 className="text-red-800 font-semibold mb-2">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö</h2>
          <p className="text-red-600">{userError.message}</p>
          <details className="mt-2">
            <summary className="cursor-pointer text-sm text-red-500">–î–µ—Ç–∞–ª—ñ</summary>
            <pre className="mt-2 text-xs bg-red-100 p-2 rounded overflow-auto">
              {JSON.stringify(userError, null, 2)}
            </pre>
          </details>
          <Button 
            onClick={() => window.location.reload()} 
            className="mt-4"
            variant="outline"
          >
            –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏
          </Button>
        </CardContent>
      </Card>
    </div>
  );
}