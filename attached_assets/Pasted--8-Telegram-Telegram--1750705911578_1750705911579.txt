# –ü—Ä–æ–º–ø—Ç 8: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram –±–æ—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏

```
–û–±–Ω–æ–≤–∏ Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "–ö–∞—Ä–º—ñ—á–Ω–∏–π —â–æ–¥–µ–Ω–Ω–∏–∫".

1. –û–±–Ω–æ–≤–∏ –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –±–æ—Ç–∞ `/server/bot/index.ts`:
```typescript
import { Bot, InlineKeyboard, Context } from 'grammy';
import { db } from '../db';
import { users, journalEntries, achievements } from '../db/schema';
import { eq, gte, and, sql } from 'drizzle-orm';
import { SubscriptionService } from '../services/subscription.service';
import { AIAssistant } from '../services/ai.service';

const bot = new Bot(process.env.TELEGRAM_BOT_TOKEN!);
const subscriptionService = new SubscriptionService();
const aiAssistant = new AIAssistant();

// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
bot.command('start', async (ctx) => {
  const telegramId = ctx.from?.id.toString();
  const firstName = ctx.from?.first_name || '–î—Ä—É–∂–µ';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const existingUser = await db.query.users.findFirst({
    where: eq(users.telegramId, telegramId)
  });
  
  if (existingUser) {
    await ctx.reply(
      `–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, ${firstName}! üåü\n\n` +
      `–¢–≤–æ—è –∫–∞—Ä–º–∞: ${await getUserKarma(existingUser.id)} –±–∞–ª—ñ–≤\n` +
      `–°–µ—Ä—ñ—è –¥–Ω—ñ–≤: ${await getUserStreak(existingUser.id)}\n\n` +
      `–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –º–µ–Ω—é –Ω–∏–∂—á–µ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É:`
    );
  } else {
    await ctx.reply(
      `–ü—Ä–∏–≤—ñ—Ç, ${firstName}! üôè\n\n` +
      `–Ø - —Ç–≤—ñ–π –ö–∞—Ä–º—ñ—á–Ω–∏–π –©–æ–¥–µ–Ω–Ω–∏–∫. –î–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ:\n` +
      `‚Ä¢ –ó–∞–ø–∏—Å—É–≤–∞—Ç–∏ –¥–æ–±—Ä—ñ —Å–ø—Ä–∞–≤–∏\n` +
      `‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –∫–∞—Ä–º—É\n` +
      `‚Ä¢ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ AI-–ø–æ—Ä–∞–¥–∏\n` +
      `‚Ä¢ –°–≤—è—Ç–∫—É–≤–∞—Ç–∏ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è\n\n` +
      `–ü–æ—á–Ω–µ–º–æ –∑ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤ –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É:`
    );
  }
  
  await showMainMenu(ctx);
});

// –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
async function showMainMenu(ctx: Context) {
  const keyboard = new InlineKeyboard()
    .text('üìù –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å', 'add_entry')
    .text('üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats')
    .row()
    .text('üèÜ –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è', 'achievements')
    .text('üí¨ AI-–ø–æ—Ä–∞–¥–∞', 'ai_advice')
    .row()
    .text('üíé –ü—ñ–¥–ø–∏—Å–∫–∞', 'subscription')
    .webApp('üåê –í—ñ–¥–∫—Ä–∏—Ç–∏ –¥–æ–¥–∞—Ç–æ–∫', process.env.APP_URL!);
  
  await ctx.reply('–©–æ –±–∞–∂–∞—î—à –∑—Ä–æ–±–∏—Ç–∏?', { reply_markup: keyboard });
}

// –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É
bot.callbackQuery('add_entry', async (ctx) => {
  await ctx.answerCallbackQuery();
  
  const keyboard = new InlineKeyboard()
    .text('üíù –î–æ–±—Ä–æ—Ç–∞', 'entry_kindness')
    .text('üôè –í–¥—è—á–Ω—ñ—Å—Ç—å', 'entry_gratitude')
    .text('ü§ù –î–æ–ø–æ–º–æ–≥–∞', 'entry_help')
    .row()
    .text('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'main_menu');
  
  await ctx.editMessageText(
    '–û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–ª—è —Å–≤–æ–≥–æ –∑–∞–ø–∏—Å—É:',
    { reply_markup: keyboard }
  );
});

// –û–±—Ä–æ–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
['kindness', 'gratitude', 'help'].forEach(category => {
  bot.callbackQuery(`entry_${category}`, async (ctx) => {
    await ctx.answerCallbackQuery();
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤ —Å–µ—Å—ñ—ó
    ctx.session = { ...ctx.session, currentCategory: category };
    
    const categoryNames = {
      kindness: '–î–æ–±—Ä–æ—Ç–∞',
      gratitude: '–í–¥—è—á–Ω—ñ—Å—Ç—å',
      help: '–î–æ–ø–æ–º–æ–≥–∞'
    };
    
    await ctx.editMessageText(
      `–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: ${categoryNames[category]}\n\n` +
      `–û–ø–∏—à–∏ —Å–≤–æ—é –¥–æ–±—Ä—É —Å–ø—Ä–∞–≤—É –∞–±–æ –∑–∞ —â–æ —Ç–∏ –≤–¥—è—á–Ω–∏–π:`
    );
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    ctx.session.waitingForEntry = true;
  });
});

// –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
bot.on('message:text', async (ctx) => {
  if (ctx.session?.waitingForEntry) {
    const telegramId = ctx.from?.id.toString();
    const user = await db.query.users.findFirst({
      where: eq(users.telegramId, telegramId)
    });
    
    if (!user) {
      await ctx.reply('–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è –≤ –¥–æ–¥–∞—Ç–∫—É! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start');
      return;
    }
    
    const category = ctx.session.currentCategory || 'kindness';
    const description = ctx.message.text;
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –±–∞–ª–∏ –∫–∞—Ä–º–∏
    const karmaPoints = {
      kindness: 10,
      gratitude: 5,
      help: 15
    }[category];
    
    // –î–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Å
    await db.insert(journalEntries).values({
      userId: user.id,
      category,
      description,
      karmaPoints
    });
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
    await checkAndNotifyAchievements(ctx, user.id);
    
    // –û—á–∏—â–∞—î–º–æ —Å–µ—Å—ñ—é
    ctx.session.waitingForEntry = false;
    ctx.session.currentCategory = null;
    
    await ctx.reply(
      `‚úÖ –ó–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ!\n` +
      `–¢–∏ –æ—Ç—Ä–∏–º–∞–≤ ${karmaPoints} –±–∞–ª—ñ–≤ –∫–∞—Ä–º–∏.\n\n` +
      `–¢–≤–æ—è –∑–∞–≥–∞–ª—å–Ω–∞ –∫–∞—Ä–º–∞: ${await getUserKarma(user.id)} –±–∞–ª—ñ–≤`,
      { reply_markup: new InlineKeyboard().text('üìù –î–æ–¥–∞—Ç–∏ —â–µ', 'add_entry').text('üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', 'main_menu') }
    );
  }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.callbackQuery('stats', async (ctx) => {
  await ctx.answerCallbackQuery();
  
  const telegramId = ctx.from?.id.toString();
  const user = await db.query.users.findFirst({
    where: eq(users.telegramId, telegramId)
  });
  
  if (!user) {
    await ctx.reply('–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è –≤ –¥–æ–¥–∞—Ç–∫—É!');
    return;
  }
  
  const totalKarma = await getUserKarma(user.id);
  const streak = await getUserStreak(user.id);
  const todayKarma = await getTodayKarma(user.id);
  const totalEntries = await getTotalEntries(user.id);
  
  const statsMessage = 
    `üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n` +
    `üí´ –ó–∞–≥–∞–ª—å–Ω–∞ –∫–∞—Ä–º–∞: ${totalKarma} –±–∞–ª—ñ–≤\n` +
    `üî• –°–µ—Ä—ñ—è –¥–Ω—ñ–≤: ${streak}\n` +
    `üìÖ –ö–∞—Ä–º–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: ${todayKarma} –±–∞–ª—ñ–≤\n` +
    `üìù –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: ${totalEntries}\n\n` +
    `–ü—Ä–æ–¥–æ–≤–∂—É–π –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ! üåü`;
  
  await ctx.editMessageText(statsMessage, {
    reply_markup: new InlineKeyboard()
      .webApp('üìà –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', `${process.env.APP_URL}/statistics`)
      .row()
      .text('üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', 'main_menu')
  });
});

// –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è
bot.callbackQuery('achievements', async (ctx) => {
  await ctx.answerCallbackQuery();
  
  const telegramId = ctx.from?.id.toString();
  const user = await db.query.users.findFirst({
    where: eq(users.telegramId, telegramId)
  });
  
  if (!user) {
    await ctx.reply('–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è –≤ –¥–æ–¥–∞—Ç–∫—É!');
    return;
  }
  
  const userAchievements = await db.query.achievements.findMany({
    where: eq(achievements.userId, user.id)
  });
  
  const achievementTitles = {
    'first_entry': 'üåü –ü–µ—Ä—à–∏–π –∫—Ä–æ–∫',
    '7_days_streak': 'üî• –¢–∏–∂–Ω–µ–≤–∞ —Å–µ—Ä—ñ—è',
    'gratitude_master': 'üôè –ú–∞–π—Å—Ç–µ—Ä –≤–¥—è—á–Ω–æ—Å—Ç—ñ'
  };
  
  let message = 'üèÜ –¢–≤–æ—ó –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è:\n\n';
  
  if (userAchievements.length === 0) {
    message += '–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –¥–æ—Å—è–≥–Ω–µ–Ω—å. –ü—Ä–æ–¥–æ–≤–∂—É–π –≤–µ—Å—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–∫!';
  } else {
    userAchievements.forEach(achievement => {
      message += `${achievementTitles[achievement.type] || achievement.type}\n`;
    });
  }
  
  await ctx.editMessageText(message, {
    reply_markup: new InlineKeyboard()
      .webApp('üèÜ –í—Å—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è', `${process.env.APP_URL}/achievements`)
      .row()
      .text('üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', 'main_menu')
  });
});

// AI-–ø–æ—Ä–∞–¥–∞
bot.callbackQuery('ai_advice', async (ctx) => {
  await ctx.answerCallbackQuery();
  
  const telegramId = ctx.from?.id.toString();
  const user = await db.query.users.findFirst({
    where: eq(users.telegramId, telegramId)
  });
  
  if (!user) {
    await ctx.reply('–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è –≤ –¥–æ–¥–∞—Ç–∫—É!');
    return;
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É
  const subscription = await subscriptionService.getCurrentSubscription(user.id);
  
  if (!subscription || subscription.plan === 'light') {
    await ctx.editMessageText(
      'üíé AI-–ø–æ—Ä–∞–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –ø—ñ–¥–ø–∏—Å–æ–∫ Plus —Ç–∞ Pro.\n\n' +
      '–û—Ñ–æ—Ä–º–∏ –ø—ñ–¥–ø–∏—Å–∫—É, —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø–æ—Ä–∞–¥–∏ –≤—ñ–¥ AI!',
      {
        reply_markup: new InlineKeyboard()
          .webApp('üíé –û—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É', `${process.env.APP_URL}/subscriptions`)
          .row()
          .text('üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', 'main_menu')
      }
    );
    return;
  }
  
  // –ü–æ–∫–∞–∑—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  const loadingMsg = await ctx.editMessageText('ü§î AI –≥–µ–Ω–µ—Ä—É—î –ø–æ—Ä–∞–¥—É...');
  
  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const recentEntries = await db.query.journalEntries.findMany({
      where: eq(journalEntries.userId, user.id),
      orderBy: (entries, { desc }) => [desc(entries.createdAt)],
      limit: 5
    });
    
    const prompt = `–î–∞–π –∫–æ—Ä–æ—Ç–∫—É –º–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω—É –ø–æ—Ä–∞–¥—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –∫–∞—Ä–º—ñ—á–Ω–æ–º—É —â–æ–¥–µ–Ω–Ω–∏–∫—É. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –±—É–¥—å –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º —Ç–∞ –Ω–∞–¥–∏—Ö–∞—é—á–∏–º. –ú–∞–∫—Å–∏–º—É–º 2-3 —Ä–µ—á–µ–Ω–Ω—è.`;
    
    const advice = await aiAssistant.generateResponse(prompt, user.id);
    
    await ctx.api.editMessageText(
      ctx.chat?.id!,
      loadingMsg.message_id,
      `üí° AI-–ø–æ—Ä–∞–¥–∞ –¥–ª—è —Ç–µ–±–µ:\n\n${advice}\n\n‚ú® –ü—Ä–æ–¥–æ–≤–∂—É–π —Ç–≤–æ—Ä–∏—Ç–∏ –¥–æ–±—Ä–æ!`,
      {
        reply_markup: new InlineKeyboard()
          .text('üí° –©–µ –ø–æ—Ä–∞–¥–∞', 'ai_advice')
          .text('üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', 'main_menu')
      }
    );
  } catch (error) {
    await ctx.api.editMessageText(
      ctx.chat?.id!,
      loadingMsg.message_id,
      '‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ä–∞–¥—É. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.',
      {
        reply_markup: new InlineKeyboard().text('üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', 'main_menu')
      }
    );
  }
});

// –ü—ñ–¥–ø–∏—Å–∫–∞
bot.callbackQuery('subscription', async (ctx) => {
  await ctx.answerCallbackQuery();
  
  const telegramId = ctx.from?.id.toString();
  const user = await db.query.users.findFirst({
    where: eq(users.telegramId, telegramId)
  });
  
  if (!user) {
    await ctx.reply('–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è –≤ –¥–æ–¥–∞—Ç–∫—É!');
    return;
  }
  
  const subscription = await subscriptionService.getCurrentSubscription(user.id);
  
  let message = 'üíé –¢–≤–æ—è –ø—ñ–¥–ø–∏—Å–∫–∞:\n\n';
  
  if (!subscription || subscription.plan === 'none') {
    message += '–£ —Ç–µ–±–µ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –ø–ª–∞–Ω.\n\n' +
      '–ü–µ—Ä–µ–≤–∞–≥–∏ –ø–ª–∞—Ç–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å–æ–∫:\n' +
      '‚Ä¢ Plus: AI-–ø–æ—Ä–∞–¥–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n' +
      '‚Ä¢ Pro: AI-—á–∞—Ç, –Ω–µ–æ–±–º–µ–∂–µ–Ω—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ';
  } else {
    message += `–ü–ª–∞–Ω: ${subscription.plan.toUpperCase()}\n` +
      `–î—ñ—î –¥–æ: ${new Date(subscription.endDate).toLocaleDateString('uk-UA')}\n\n`;
    
    if (subscription.plan === 'plus') {
      message += '–¢–∏ –º–∞—î—à –¥–æ—Å—Ç—É–ø –¥–æ AI-–ø–æ—Ä–∞–¥!';
    } else if (subscription.plan === 'pro') {
      message += '–¢–∏ –º–∞—î—à –ø–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π!';
    }
  }
  
  await ctx.editMessageText(message, {
    reply_markup: new InlineKeyboard()
      .webApp('üíé –ö–µ—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫–æ—é', `${process.env.APP_URL}/subscriptions`)
      .row()
      .text('üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', 'main_menu')
  });
});

// –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
bot.callbackQuery('main_menu', async (ctx) => {
  await ctx.answerCallbackQuery();
  await showMainMenu(ctx);
});

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
async function getUserKarma(userId: number): Promise<number> {
  const result = await db
    .select({ total: sql<number>`COALESCE(SUM(karma_points), 0)` })
    .from(journalEntries)
    .where(eq(journalEntries.userId, userId));
  
  return result[0]?.total || 0;
}

async function getUserStreak(userId: number): Promise<number> {
  const entries = await db.query.journalEntries.findMany({
    where: eq(journalEntries.userId, userId),
    orderBy: (entries, { desc }) => [desc(entries.createdAt)]
  });
  
  const dates = [...new Set(entries.map(e => 
    new Date(e.createdAt).toDateString()
  ))].sort((a, b) => new Date(b).getTime() - new Date(a).getTime());
  
  let streak = 0;
  const today = new Date();
  
  for (let i = 0; i < dates.length; i++) {
    const expectedDate = new Date(today);
    expectedDate.setDate(expectedDate.getDate() - i);
    
    if (dates[i] === expectedDate.toDateString()) {
      streak++;
    } else {
      break;
    }
  }
  
  return streak;
}

async function getTodayKarma(userId: number): Promise<number> {
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  
  const result = await db
    .select({ total: sql<number>`COALESCE(SUM(karma_points), 0)` })
    .from(journalEntries)
    .where(and(
      eq(journalEntries.userId, userId),
      gte(journalEntries.createdAt, today)
    ));
  
  return result[0]?.total || 0;
}

async function getTotalEntries(userId: number): Promise<number> {
  const result = await db
    .select({ count: sql<number>`COUNT(*)` })
    .from(journalEntries)
    .where(eq(journalEntries.userId, userId));
  
  return result[0]?.count || 0;
}

async function checkAndNotifyAchievements(ctx: Context, userId: number) {
  const totalEntries = await getTotalEntries(userId);
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä—à–∏–π –∑–∞–ø–∏—Å
  if (totalEntries === 1) {
    const existing = await db.query.achievements.findFirst({
      where: and(
        eq(achievements.userId, userId),
        eq(achievements.type, 'first_entry')
      )
    });
    
    if (!existing) {
      await db.insert(achievements).values({
        userId,
        type: 'first_entry',
        unlockedAt: new Date()
      });
      
      await ctx.reply('üéâ –í—ñ—Ç–∞—î–º–æ! –¢–∏ –æ—Ç—Ä–∏–º–∞–≤ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è "–ü–µ—Ä—à–∏–π –∫—Ä–æ–∫"!');
    }
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–µ—Ä—ñ—é
  const streak = await getUserStreak(userId);
  if (streak >= 7) {
    const existing = await db.query.achievements.findFirst({
      where: and(
        eq(achievements.userId, userId),
        eq(achievements.type, '7_days_streak')
      )
    });
    
    if (!existing) {
      await db.insert(achievements).values({
        userId,
        type: '7_days_streak',
        unlockedAt: new Date()
      });
      
      await ctx.reply('üî• –ù–µ–π–º–æ–≤—ñ—Ä–Ω–æ! –¢–∏ –æ—Ç—Ä–∏–º–∞–≤ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è "–¢–∏–∂–Ω–µ–≤–∞ —Å–µ—Ä—ñ—è"!');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
bot.start();
console.log('ü§ñ Telegram bot started!');

export { bot };
```

2. –î–æ–¥–∞–π –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –≤ `package.json`:
```json
{
  "scripts": {
    "bot": "tsx server/bot/index.ts",
    "dev": "concurrently \"npm run server\" \"npm run client\" \"npm run bot\""
  }
}
```

3. –°—Ç–≤–æ—Ä–∏ —Ñ–∞–π–ª –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –¥–ª—è —Å–µ—Å—ñ–π –±–æ—Ç–∞ `/server/bot/session.ts`:
```typescript
export interface SessionData {
  currentCategory?: string;
  waitingForEntry?: boolean;
}
```

4. –î–æ–¥–∞–π –ø–µ—Ä–µ–º–µ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ `TELEGRAM_BOT_TOKEN` –≤ `.env`:
```
TELEGRAM_BOT_TOKEN=your_bot_token_here
```

–ë–æ—Ç —Ç–µ–ø–µ—Ä –ø—ñ–¥—Ç—Ä–∏–º—É—î:
- –®–≤–∏–¥–∫–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ —á–µ—Ä–µ–∑ Telegram
- –ü–µ—Ä–µ–≥–ª—è–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞ –¥–æ—Å—è–≥–Ω–µ–Ω—å
- AI-–ø–æ—Ä–∞–¥–∏ –¥–ª—è Plus/Pro –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤
- –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑ –≤–µ–±-–¥–æ–¥–∞—Ç–∫–æ–º
- –ü–µ—Ä–µ–≤—ñ—Ä–∫—É –ø—ñ–¥–ø–∏—Å–æ–∫
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
```