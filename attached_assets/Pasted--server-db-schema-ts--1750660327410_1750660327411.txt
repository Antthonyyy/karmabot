Обнови схему базы данных для приложения "Кармічний щоденник" в файле /server/db/schema.ts, чтобы поддержать подписки, AI-запросы с контролем бюджета, кэширование и геймификацию.

Импортируй необходимые функции в начале файла:

typescriptimport { sqliteTable, text, integer, real } from 'drizzle-orm/sqlite-core';
import { sql } from 'drizzle-orm';

Обнови таблицу users, добавив поля для подписок:

typescriptsubscription: text('subscription', { enum: ['none', 'light', 'plus', 'pro'] }).default('none'),
subscriptionStartDate: integer('subscription_start_date', { mode: 'timestamp' }),
subscriptionEndDate: integer('subscription_end_date', { mode: 'timestamp' }),
preferredLanguage: text('preferred_language').default('uk'),

Создай новую таблицу subscriptions:

typescriptexport const subscriptions = sqliteTable('subscriptions', {
  id: integer('id').primaryKey({ autoIncrement: true }),
  userId: integer('user_id').notNull().references(() => users.id),
  plan: text('plan', { enum: ['light', 'plus', 'pro'] }).notNull(),
  billingPeriod: text('billing_period', { enum: ['monthly', 'yearly'] }).notNull(),
  startDate: integer('start_date', { mode: 'timestamp' }).notNull(),
  endDate: integer('end_date', { mode: 'timestamp' }).notNull(),
  status: text('status', { enum: ['active', 'cancelled', 'expired', 'pending'] }).default('pending'),
  paymentOrderId: text('payment_order_id'),
  amount: real('amount').notNull(),
  currency: text('currency').default('EUR'),
  createdAt: integer('created_at', { mode: 'timestamp' }).default(sql`CURRENT_TIMESTAMP`)
});

Создай таблицу aiRequests с полями для контроля бюджета:

typescriptexport const aiRequests = sqliteTable('ai_requests', {
  id: integer('id').primaryKey({ autoIncrement: true }),
  userId: integer('user_id').notNull().references(() => users.id),
  type: text('type', { enum: ['advisor', 'chat'] }).notNull(),
  tokensUsed: integer('tokens_used').notNull().default(0),
  cost: real('cost').notNull().default(0),
  model: text('model').notNull().default('gpt-3.5-turbo'),
  createdAt: integer('created_at', { mode: 'timestamp' }).default(sql`CURRENT_TIMESTAMP`)
});

Создай таблицу aiCache:

typescriptexport const aiCache = sqliteTable('ai_cache', {
  id: integer('id').primaryKey({ autoIncrement: true }),
  questionHash: text('question_hash').notNull().unique(),
  response: text('response').notNull(),
  language: text('language').default('uk'),
  expiresAt: integer('expires_at', { mode: 'timestamp' }),
  createdAt: integer('created_at', { mode: 'timestamp' }).default(sql`CURRENT_TIMESTAMP`)
});

Создай таблицу achievements:

typescriptexport const achievements = sqliteTable('achievements', {
  id: integer('id').primaryKey({ autoIncrement: true }),
  userId: integer('user_id').notNull().references(() => users.id),
  type: text('type', { enum: ['first_entry', '7_days_streak', '30_days_streak', '50_entries', '100_entries', 'gratitude_master', 'karma_champion'] }).notNull(),
  unlockedAt: integer('unlocked_at', { mode: 'timestamp' }).default(sql`CURRENT_TIMESTAMP`),
  notified: integer('notified').default(0)
});

Создай файл миграции /server/db/migrations/001_add_subscriptions.sql:

sql-- Добавляем поля в users
ALTER TABLE users ADD COLUMN subscription TEXT DEFAULT 'none';
ALTER TABLE users ADD COLUMN subscription_start_date INTEGER;
ALTER TABLE users ADD COLUMN subscription_end_date INTEGER;
ALTER TABLE users ADD COLUMN preferred_language TEXT DEFAULT 'uk';

-- Создаем новые таблицы
CREATE TABLE IF NOT EXISTS subscriptions (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_id INTEGER NOT NULL REFERENCES users(id),
  plan TEXT NOT NULL,
  billing_period TEXT NOT NULL,
  start_date INTEGER NOT NULL,
  end_date INTEGER NOT NULL,
  status TEXT DEFAULT 'pending',
  payment_order_id TEXT,
  amount REAL NOT NULL,
  currency TEXT DEFAULT 'EUR',
  created_at INTEGER DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS ai_requests (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_id INTEGER NOT NULL REFERENCES users(id),
  type TEXT NOT NULL,
  tokens_used INTEGER DEFAULT 0,
  cost REAL DEFAULT 0,
  model TEXT DEFAULT 'gpt-3.5-turbo',
  created_at INTEGER DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS ai_cache (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  question_hash TEXT NOT NULL UNIQUE,
  response TEXT NOT NULL,
  language TEXT DEFAULT 'uk',
  expires_at INTEGER,
  created_at INTEGER DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS achievements (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  user_id INTEGER NOT NULL REFERENCES users(id),
  type TEXT NOT NULL,
  unlocked_at INTEGER DEFAULT CURRENT_TIMESTAMP,
  notified INTEGER DEFAULT 0
);

-- Создаем индексы для производительности
CREATE INDEX idx_subscriptions_user_id ON subscriptions(user_id);
CREATE INDEX idx_ai_requests_user_created ON ai_requests(user_id, created_at);
CREATE INDEX idx_achievements_user_id ON achievements(user_id);