"Кармический дневник" — это единая система, состоящая из веб-приложения и Telegram-бота. Пользователи могут авторизоваться в приложении через свой Telegram-аккаунт. После этого бот будет присылать им персонализированные напоминания о кармических принципах, а пользователи смогут отвечать на них, создавая записи в своем дневнике.

Детальные инструкции для AI-агента (Дополненные)
1. Авторизация через Telegram
Задача: Реализовать вход в веб-приложение с помощью кнопки "Login with Telegram".

Фронтенд (client/src):

Создать компонент TelegramLoginButton.tsx.
В этом компоненте разместить официальный виджет Telegram для авторизации.
Настроить виджет так, чтобы после успешной авторизации он перенаправлял пользователя на бэкенд-эндпоинт /api/auth/telegram/callback с данными пользователя.
Бэкенд (server/auth.ts, server/routes.ts):

Создать эндпоинт /api/auth/telegram/callback.
Этот эндпоинт должен:
Принять данные от виджета Telegram.
Верифицировать подлинность данных, сравнив полученный хэш с хэшем, сгенерированным с помощью токена вашего бота (TELEGRAM_BOT_TOKEN). Это критически важно для безопасности.
Найти пользователя в таблице users по его telegramId.
Если пользователь не найден — создать нового, сохранив его Telegram ID, имя, и chat_id (который также приходит от Telegram).
Создать и отправить на фронтенд сессионный токен (например, JWT), чтобы пользователь был авторизован в веб-приложении.
Схема базы данных (shared/schema.ts):

В таблицу users добавить новое поле: telegramId: varchar("telegram_id").unique().
2. Логика работы Telegram-бота
Задача: Интегрировать существующий код бота (код бота.txt) в бэкенд приложения, используя централизованную логику.

Первое взаимодействие (команда /start):

Когда новый пользователь запускает бота, бот должен ответить приветственным сообщением.
В сообщении должна быть кнопка или ссылка "Войти в приложение", которая ведет на страницу авторизации веб-приложения.
Пользователь должен получить свой Chat ID, который он сможет использовать для ручной привязки в настройках, если потребуется.
Отправка напоминаний о принципах:

Централизация логики: Всю логику отправки напоминаний перенести в server/reminderService.ts.
Персонализация: Сервис напоминаний должен:
Для каждого пользователя, у которого в профиле есть telegramChatId, проверять его настройки напоминаний.
Определять, какой кармический принцип (current_principle) у пользователя сейчас активен.
Формировать сообщение с текстом этого принципа, используя заготовки из файла код бота.txt.
Отправлять сообщение пользователю через telegramService.sendMessage.
Прием записей в дневник:

Любой текст, отправленный боту (кроме команд), должен обрабатываться как запись в дневник.
Бэкенд должен определить пользователя по chat_id и создать новую запись в таблице journal_entries, привязав ее к текущему принципу пользователя.
Вопросы для финального уточнения:
Прежде чем агент приступит к работе, давайте проясним несколько моментов, чтобы результат был максимально точным:

Основной способ входа: Авторизация через Telegram будет единственным способом входа, или это будет дополнительная опция наряду с Email/Google через Firebase?
Связывание аккаунтов: Если пользователь уже зарегистрирован через email, как он сможет подключить Telegram для получения напоминаний? Предлагаю добавить кнопку "Подключить Telegram" в настройках профиля.
Содержание напоминаний: Ваш код для бота содержит заранее прописанные вопросы для каждого принципа. Хотите ли вы использовать именно их, или предпочитаете, чтобы AI-сервис (aiService.ts) генерировал более разнообразные и персонализированные вопросы для напоминаний?
Дополнительные команды в боте: Должен ли бот уметь отвечать на дополнительные команды? Например:
/my_principle — показать текущий принцип.
/stats — показать краткую статистику (например, "Вы ведете дневник 5 дней подряд!").
/settings — дать ссылку на страницу настроек в веб-приложении.