# Задача: Обновить страницу настроек для новой системы напоминаний

## Что нужно сделать:

### 1. Полностью переписать `/src/pages/SettingsPage.tsx`:

```typescript
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Switch } from "@/components/ui/switch";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { ArrowLeft, Bell, Clock, Settings, Save, Plus, Trash2 } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { useUser } from "@/hooks/use-user";
import { apiRequest } from "@/lib/queryClient";
import ReminderModeSelector from "@/components/ReminderModeSelector";
import CustomScheduleEditor from "@/components/CustomScheduleEditor";

interface Schedule {
  id?: number;
  time: string;
  type: 'principle' | 'reflection';
  enabled: boolean;
}

export default function SettingsPage() {
  const navigate = useNavigate();
  const { user, refetch } = useUser();
  const { toast } = useToast();
  
  const [remindersEnabled, setRemindersEnabled] = useState(true);
  const [reminderMode, setReminderMode] = useState('balanced');
  const [customSchedule, setCustomSchedule] = useState<Schedule[]>([]);
  const [principlesCount, setPrinciplesCount] = useState(2);
  const [isSaving, setIsSaving] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [showModeSelector, setShowModeSelector] = useState(false);
  
  // Загружаем текущие настройки
  useEffect(() => {
    loadCurrentSettings();
  }, [user]);
  
  const loadCurrentSettings = async () => {
    if (!user) return;
    
    try {
      // Загружаем текущие настройки пользователя
      const response = await apiRequest("GET", "/api/user/reminder-settings");
      
      setRemindersEnabled(response.remindersEnabled ?? true);
      setReminderMode(response.reminderMode || 'balanced');
      setPrinciplesCount(response.dailyPrinciplesCount || 2);
      
      if (response.schedule && response.schedule.length > 0) {
        setCustomSchedule(response.schedule);
      }
      
      setIsLoading(false);
    } catch (error) {
      console.error('Error loading settings:', error);
      setIsLoading(false);
    }
  };
  
  const handleSave = async () => {
    setIsSaving(true);
    try {
      await apiRequest("POST", "/api/user/setup-reminders", {
        mode: reminderMode,
        principlesCount,
        customSchedule: reminderMode === 'custom' ? customSchedule : undefined,
        enabled: remindersEnabled,
      });
      
      await refetch();
      
      toast({
        title: "Налаштування збережено",
        description: "Розклад нагадувань оновлено успішно",
      });
      
      setShowModeSelector(false);
    } catch (error) {
      toast({
        title: "Помилка",
        description: "Не вдалося зберегти налаштування",
        variant: "destructive",
      });
    } finally {
      setIsSaving(false);
    }
  };
  
  const sendTestReminder = async () => {
    try {
      await apiRequest("POST", "/api/test-reminder");
      toast({
        title: "Тестове нагадування відправлено",
        description: "Перевірте Telegram",
      });
    } catch (error) {
      toast({
        title: "Помилка",
        description: "Не вдалося відправити тестове нагадування",
        variant: "destructive",
      });
    }
  };
  
  // Отображение текущего режима
  const getModeDisplay = () => {
    const modes = {
      intensive: { name: 'Інтенсивний', principles: 4, color: 'bg-red-100 text-red-700' },
      balanced: { name: 'Збалансований', principles: 3, color: 'bg-green-100 text-green-700' },
      light: { name: 'Легкий', principles: 2, color: 'bg-blue-100 text-blue-700' },
      custom: { name: 'Власний', principles: principlesCount, color: 'bg-purple-100 text-purple-700' },
    };
    
    return modes[reminderMode] || modes.balanced;
  };
  
  const currentMode = getModeDisplay();
  
  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900"></div>
      </div>
    );
  }
  
  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100">
      <div className="max-w-4xl mx-auto p-4">
        <Button
          variant="ghost"
          onClick={() => navigate("/dashboard")}
          className="mb-6"
        >
          <ArrowLeft className="mr-2 h-4 w-4" />
          Назад
        </Button>
        
        {/* Основная карточка настроек */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Bell className="h-6 w-6" />
              Налаштування нагадувань
            </CardTitle>
            <CardDescription>
              Керуйте розкладом отримання кармічних принципів
            </CardDescription>
          </CardHeader>
          
          <CardContent className="space-y-6">
            {/* Включение/выключение напоминаний */}
            <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
              <Label htmlFor="reminders-enabled" className="flex items-center gap-2 cursor-pointer">
                <Bell className="h-4 w-4" />
                <div>
                  <div className="font-medium">Отримувати нагадування</div>
                  <div className="text-sm text-gray-500">Щоденні нагадування про кармічні принципи</div>
                </div>
              </Label>
              <Switch
                id="reminders-enabled"
                checked={remindersEnabled}
                onCheckedChange={setRemindersEnabled}
              />
            </div>
            
            {/* Текущий режим */}
            <div className="p-4 border rounded-lg">
              <div className="flex items-center justify-between mb-3">
                <Label className="text-base font-medium">Поточний режим</Label>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setShowModeSelector(!showModeSelector)}
                  disabled={!remindersEnabled}
                >
                  <Settings className="h-4 w-4 mr-1" />
                  Змінити
                </Button>
              </div>
              
              <div className="flex items-center gap-3">
                <Badge className={currentMode.color}>
                  {currentMode.name}
                </Badge>
                <span className="text-sm text-gray-600">
                  {currentMode.principles} принципи щодня
                </span>
              </div>
              
              {/* Показываем расписание для текущего режима */}
              {!showModeSelector && customSchedule.length > 0 && (
                <div className="mt-4 space-y-2">
                  <p className="text-sm font-medium text-gray-700">Розклад нагадувань:</p>
                  <div className="space-y-1">
                    {customSchedule
                      .filter(s => s.enabled)
                      .map((schedule, index) => (
                        <div key={index} className="flex items-center gap-2 text-sm text-gray-600">
                          <Clock className="h-3 w-3" />
                          <span>{schedule.time}</span>
                          <span className="text-gray-400">•</span>
                          <span>
                            {schedule.type === 'principle' ? 'Новий принцип' : 'Рефлексія'}
                          </span>
                        </div>
                      ))}
                  </div>
                </div>
              )}
            </div>
            
            {/* Селектор режимов (показывается при нажатии "Изменить") */}
            {showModeSelector && (
              <div className="space-y-6 p-4 bg-gray-50 rounded-lg">
                <ReminderModeSelector
                  selectedMode={reminderMode}
                  onModeSelect={setReminderMode}
                />
                
                {/* Кастомный редактор (если выбран custom режим) */}
                {reminderMode === 'custom' && (
                  <CustomScheduleEditor
                    schedule={customSchedule}
                    onChange={setCustomSchedule}
                    principlesCount={principlesCount}
                    onPrinciplesCountChange={setPrinciplesCount}
                  />
                )}
                
                {/* Кнопки сохранения/отмены */}
                <div className="flex gap-3">
                  <Button
                    variant="outline"
                    onClick={() => {
                      setShowModeSelector(false);
                      loadCurrentSettings(); // Восстанавливаем исходные настройки
                    }}
                    className="flex-1"
                  >
                    Скасувати
                  </Button>
                  <Button
                    onClick={handleSave}
                    disabled={isSaving}
                    className="flex-1"
                  >
                    {isSaving ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2" />
                        Збереження...
                      </>
                    ) : (
                      <>
                        <Save className="mr-2 h-4 w-4" />
                        Зберегти зміни
                      </>
                    )}
                  </Button>
                </div>
              </div>
            )}
            
            {/* Информация о часовом поясе */}
            <div className="p-4 bg-blue-50 rounded-lg">
              <p className="text-sm text-blue-800">
                <strong>Часовий пояс:</strong> Київський час (UTC+2)
              </p>
              <p className="text-sm text-blue-600 mt-1">
                Нагадування будуть приходити за київським часом
              </p>
            </div>
            
            {/* Кнопка тестового напоминания */}
            <Button
              variant="outline"
              onClick={sendTestReminder}
              disabled={!remindersEnabled}
              className="w-full"
            >
              <Bell className="mr-2 h-4 w-4" />
              Надіслати тестове нагадування
            </Button>
          </CardContent>
        </Card>
        
        {/* Информационная карточка */}
        <Card>
          <CardContent className="pt-6">
            <p className="text-sm text-muted-foreground">
              <strong>Важливо:</strong> Для отримання нагадувань переконайтеся, що ви запустили бота @karmics_diary_bot в Telegram та не заблокували його.
            </p>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
```

### 2. Создать API endpoint для получения текущих настроек `/api/user/reminder-settings`:

```javascript
app.get('/api/user/reminder-settings', authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    
    // Получаем настройки пользователя
    const userSettings = await db
      .select()
      .from(users)
      .where(eq(users.id, userId))
      .limit(1);
    
    if (userSettings.length === 0) {
      return res.status(404).json({ error: 'User not found' });
    }
    
    const user = userSettings[0];
    
    // Получаем расписание пользователя
    const schedule = await db
      .select()
      .from(reminderSchedules)
      .where(eq(reminderSchedules.userId, userId))
      .orderBy(reminderSchedules.time);
    
    res.json({
      remindersEnabled: user.remindersEnabled,
      reminderMode: user.reminderMode || 'balanced',
      dailyPrinciplesCount: user.dailyPrinciplesCount || 2,
      timezone: user.timezone || 'Europe/Kiev',
      schedule: schedule.map(s => ({
        id: s.id,
        time: s.time,
        type: s.type,
        enabled: s.enabled,
      })),
    });
  } catch (error) {
    console.error('Error fetching reminder settings:', error);
    res.status(500).json({ error: 'Failed to fetch settings' });
  }
});
```

### 3. Обновить endpoint `/api/user/setup-reminders` чтобы принимать параметр `enabled`:

В существующий endpoint добавить:
```javascript
// В начале функции после получения параметров
const { mode, principlesCount, customSchedule, enabled = true } = req.body;

// При обновлении пользователя
await db.update(users)
  .set({
    reminderMode: mode,
    dailyPrinciplesCount: principlesCount,
    remindersEnabled: enabled, // Добавить эту строку
  })
  .where(eq(users.id, userId));
```

## Результат:

Страница настроек теперь будет:
1. 📊 Показывать текущий режим и расписание
2. ⚙️ Позволять изменить режим напоминаний
3. 🎯 Поддерживать все режимы (интенсивный, сбалансированный, легкий, кастомный)
4. 💾 Сохранять изменения в базе данных
5. 🔔 Отправлять тестовые напоминания

Интерфейс стал более современным и функциональным!