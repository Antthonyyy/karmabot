# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ê–Ω—Ç–∏–¥–æ—Ç–æ–≤ –∏ AI-–ø–æ–¥—Å–∫–∞–∑–æ–∫

## –ß–∞—Å—Ç—å 1: –°–∏—Å—Ç–µ–º–∞ "–ê–Ω—Ç–∏–¥–æ—Ç–æ–≤" (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

### –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!
–ê–Ω—Ç–∏–¥–æ—Ç—ã –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –Ω–∞ –ª–µ—Ç—É –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.

### –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π reminder service:

```typescript
// server/services/reminderService.ts

import { addMinutes, subtractMinutes } from '../utils/time';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –∞–Ω—Ç–∏–¥–æ—Ç–æ–≤
function calculateAntidoteTimes(specificTimes: string[], currentTime: string) {
  const sortedTimes = specificTimes.sort();
  const currentIndex = sortedTimes.indexOf(currentTime);
  
  return {
    isFirstOfDay: currentIndex === 0,
    isLastOfDay: currentIndex === sortedTimes.length - 1,
    beforeTime: subtractMinutes(currentTime, 30),
    afterTime: addMinutes(currentTime, 30)
  };
}

// –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
export async function processScheduledReminders() {
  const now = new Date();
  const currentDay = now.toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
  const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;

  // 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –û–°–ù–û–í–ù–´–• –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
  const dueMainReminders = await db
    .select({
      userId: reminderSettings.userId,
      specificTimes: reminderSettings.specificTimes,
      user: users
    })
    .from(reminderSettings)
    .innerJoin(users, eq(users.id, reminderSettings.userId))
    .where(
      and(
        eq(reminderSettings.isEnabled, true),
        sql`${currentTime} = ANY(${reminderSettings.specificTimes})`,
        sql`${currentDay} = ANY(${reminderSettings.weekdays})`
      )
    );

  for (const reminder of dueMainReminders) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    await sendPrincipleReminder(reminder.user, reminder.user.currentPrinciple || 1);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–Ω—Ü–∏–ø –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π
    const nextPrinciple = (reminder.user.currentPrinciple || 1) === 10 ? 1 : (reminder.user.currentPrinciple || 1) + 1;
    await db.update(users)
      .set({ currentPrinciple: nextPrinciple })
      .where(eq(users.id, reminder.userId));
    
    // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º "–∞–Ω—Ç–∏–¥–æ—Ç –ø–æ—Å–ª–µ"
    const antidoteInfo = calculateAntidoteTimes(reminder.specificTimes, currentTime);
    if (antidoteInfo.isLastOfDay) {
      // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
      setTimeout(() => {
        sendAntidoteReminder(reminder.userId, 'after');
      }, 30 * 60 * 1000);
    }
  }

  // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ê–Ω—Ç–∏–¥–æ—Ç–æ–≤ –î–û" (–∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ)
  const antidoteBeforeTime = addMinutes(currentTime, 30);
  
  const dueAntidotesBefore = await db
    .select({
      userId: reminderSettings.userId,
      specificTimes: reminderSettings.specificTimes
    })
    .from(reminderSettings)
    .where(
      and(
        eq(reminderSettings.isEnabled, true),
        sql`${antidoteBeforeTime} = ANY(${reminderSettings.specificTimes})`,
        sql`${currentDay} = ANY(${reminderSettings.weekdays})`
      )
    );

  for (const reminder of dueAntidotesBefore) {
    const antidoteInfo = calculateAntidoteTimes(reminder.specificTimes, antidoteBeforeTime);
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω—Ç–∏–¥–æ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ù–ï –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–Ω—è
    if (!antidoteInfo.isFirstOfDay) {
      await sendAntidoteReminder(reminder.userId, 'before');
    }
  }

  // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ê–Ω—Ç–∏–¥–æ—Ç–æ–≤ –ü–û–°–õ–ï" (—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
  const antidoteAfterTime = subtractMinutes(currentTime, 30);
  
  const dueAntidotesAfter = await db
    .select({
      userId: reminderSettings.userId,
      specificTimes: reminderSettings.specificTimes
    })
    .from(reminderSettings)
    .where(
      and(
        eq(reminderSettings.isEnabled, true),
        sql`${antidoteAfterTime} = ANY(${reminderSettings.specificTimes})`,
        sql`${currentDay} = ANY(${reminderSettings.weekdays})`
      )
    );

  for (const reminder of dueAntidotesAfter) {
    const antidoteInfo = calculateAntidoteTimes(reminder.specificTimes, antidoteAfterTime);
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–Ω—è
    if (antidoteInfo.isLastOfDay) {
      await sendAntidoteReminder(reminder.userId, 'after');
    }
  }
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω—Ç–∏–¥–æ—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏
async function sendAntidoteReminder(userId: number, type: 'before' | 'after') {
  const user = await db.select().from(users).where(eq(users.id, userId)).limit(1);
  if (!user[0]) return;

  const messages = {
    before: "‚è∞ –ß–µ—Ä–µ–∑ 30 —Ö–≤–∏–ª–∏–Ω ‚Äî —á–∞—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–Ω—Ü–∏–ø—É. –ü—ñ–¥–≥–æ—Ç—É–π—Ç–µ—Å—è –¥–æ —É—Å–≤—ñ–¥–æ–º–ª–µ–Ω–æ—ó –ø—Ä–∞–∫—Ç–∏–∫–∏ üßò",
    after: "‚ú® –ß–∞—Å –ø—ñ–¥–≤–µ—Å—Ç–∏ –ø—ñ–¥—Å—É–º–∫–∏ –¥–Ω—è. –Ø–∫ –ø—Ä–æ–π—à–ª–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ—Ö –ø—Ä–∏–Ω—Ü–∏–ø—ñ–≤? üìù"
  };

  const message = messages[type];

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram
  if (user[0].telegramId) {
    await bot.telegram.sendMessage(user[0].telegramId, message, {
      reply_markup: {
        inline_keyboard: [[
          { text: "–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Å üìù", callback_data: 'create_entry' }
        ]]
      }
    });
  }

  // Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã)
  if (user[0].pushEnabled) {
    await sendPushNotification(userId, {
      title: type === 'before' ? '–ê–Ω—Ç–∏–¥–æ—Ç: –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞' : '–ê–Ω—Ç–∏–¥–æ—Ç: –ü—ñ–¥—Å—É–º–∫–∏',
      body: message,
      data: { type: `antidote_${type}` }
    });
  }
}
```

## –ß–∞—Å—Ç—å 2: AI-–ø–æ–¥—Å–∫–∞–∑–∫–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

### –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è):

```sql
-- –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è AI –ø–æ–¥—Å–∫–∞–∑–æ–∫
CREATE TABLE ai_insights (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  principle_id INTEGER,
  insight_text TEXT,
  created_date DATE DEFAULT CURRENT_DATE,
  interactions JSONB DEFAULT '{}', -- –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
  UNIQUE(user_id, principle_id, created_date) -- –æ–¥–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø –≤ –¥–µ–Ω—å
);

-- –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
CREATE INDEX idx_ai_insights_daily ON ai_insights(user_id, principle_id, created_date);
```

### –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π AI service:

```typescript
// server/services/aiService.ts

import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function generateDailyInsight(
  principleId: number, 
  userId: number,
  regenerate: boolean = false
): Promise<string> {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
  if (!regenerate) {
    const existing = await db.select()
      .from(aiInsights)
      .where(
        and(
          eq(aiInsights.userId, userId),
          eq(aiInsights.principleId, principleId),
          eq(aiInsights.createdDate, sql`CURRENT_DATE`)
        )
      )
      .limit(1);
    
    if (existing[0]) {
      return existing[0].insightText;
    }
  }
  
  const principle = PRINCIPLES.find(p => p.id === principleId);
  if (!principle) throw new Error('Principle not found');
  
  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const recentEntries = await db.select({
    content: journalEntries.content,
    createdAt: journalEntries.createdAt
  })
    .from(journalEntries)
    .where(
      and(
        eq(journalEntries.userId, userId),
        eq(journalEntries.principleId, principleId)
      )
    )
    .orderBy(desc(journalEntries.createdAt))
    .limit(3);
  
  const prompt = `
    –¢–∏ - –º—É–¥—Ä–∏–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. –°—Ç–≤–æ—Ä–∏ –û–î–ù–ï –∫–æ—Ä–æ—Ç–∫–µ, –ø—Ä–∞–∫—Ç–∏—á–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø–æ—Ä–∞–¥—É –¥–ª—è —Ä–æ–∑–¥—É–º—ñ–≤.
    
    –ü—Ä–∏–Ω—Ü–∏–ø –¥–Ω—è: "${principle.title}" - ${principle.description}
    
    ${recentEntries.length > 0 ? `–ö–æ–Ω—Ç–µ–∫—Å—Ç (–ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∑–∞–ø–∏—Å–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞):
    ${recentEntries.map(e => `- ${e.content.substring(0, 80)}...`).join('\n')}` : ''}
    
    –§–æ—Ä–º–∞—Ç: –û–¥–Ω–µ —Ä–µ—á–µ–Ω–Ω—è. –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –ø—Ä–∞–∫—Ç–∏—á–Ω–æ, –º–æ—Ç–∏–≤—É—é—á–µ.
    –ü–æ—á–∏–Ω–∞–π –∑: "–°—å–æ–≥–æ–¥–Ω—ñ —Å–ø—Ä–æ–±—É–π..." –ê–ë–û "–ó–≤–µ—Ä–Ω–∏ —É–≤–∞–≥—É –Ω–∞..." –ê–ë–û –ø–∏—Ç–∞–Ω–Ω—è "–©–æ –± —Å—Ç–∞–ª–æ—Å—è, —è–∫–±–∏..."
  `;
  
  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o", // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—É—é –º–æ–¥–µ–ª—å
      messages: [{ role: "system", content: prompt }],
      temperature: 0.8,
      max_tokens: 100,
    });
    
    const insight = completion.choices[0].message.content?.trim() || getFallbackInsight(principleId);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º
    await db.insert(aiInsights)
      .values({
        userId,
        principleId,
        insightText: insight,
        createdDate: sql`CURRENT_DATE`
      })
      .onConflictDoUpdate({
        target: [aiInsights.userId, aiInsights.principleId, aiInsights.createdDate],
        set: { 
          insightText: insight,
          interactions: sql`ai_insights.interactions || '{"regenerated": true}'::jsonb`
        }
      });
    
    return insight;
  } catch (error) {
    console.error('Error generating AI insight:', error);
    return getFallbackInsight(principleId);
  }
}

// API endpoint —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º React Query
app.get('/api/insights/daily/:principleId', authenticate, async (req, res) => {
  try {
    const { principleId } = req.params;
    const { regenerate } = req.query;
    
    const insight = await generateDailyInsight(
      parseInt(principleId), 
      req.userId,
      regenerate === 'true'
    );
    
    res.json({ insight });
  } catch (error) {
    console.error('Error:', error);
    res.status(500).json({ 
      error: 'Failed to generate insight',
      insight: getFallbackInsight(parseInt(req.params.principleId))
    });
  }
});
```

### Frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å React Query:

```tsx
// components/AIDailyInsight.tsx

import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Sparkles, RefreshCw, Bookmark } from 'lucide-react';
import { Button } from '@/components/ui/button';

async function fetchDailyInsight(principleId: number, regenerate = false) {
  const response = await fetch(
    `/api/insights/daily/${principleId}${regenerate ? '?regenerate=true' : ''}`
  );
  if (!response.ok) throw new Error('Failed to fetch insight');
  return response.json();
}

export function AIDailyInsight({ principleId }: { principleId: number }) {
  const queryClient = useQueryClient();
  
  // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ React Query –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
  const { data, isLoading, error } = useQuery({
    queryKey: ['daily-insight', principleId],
    queryFn: () => fetchDailyInsight(principleId),
    staleTime: 1000 * 60 * 60 * 24, // –ö–µ—à–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ 24 —á–∞—Å–∞
    retry: 1,
  });
  
  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
  const regenerateMutation = useMutation({
    mutationFn: () => fetchDailyInsight(principleId, true),
    onSuccess: (newData) => {
      queryClient.setQueryData(['daily-insight', principleId], newData);
    },
  });
  
  const insight = data?.insight || (error ? getFallbackInsight(principleId) : '');
  
  return (
    <Card className="bg-gradient-to-r from-purple-50 to-blue-50 dark:from-purple-950 dark:to-blue-950 border-purple-200 dark:border-purple-800">
      <CardHeader className="flex flex-row items-center justify-between pb-3">
        <CardTitle className="flex items-center gap-2 text-lg">
          <Sparkles className="h-5 w-5 text-purple-600 animate-pulse" />
          AI-–ø—ñ–¥–∫–∞–∑–∫–∞ –¥–Ω—è
        </CardTitle>
        <div className="flex gap-2">
          <Button 
            variant="ghost" 
            size="icon"
            onClick={() => regenerateMutation.mutate()}
            disabled={regenerateMutation.isPending}
            title="–û–Ω–æ–≤–∏—Ç–∏ –ø—ñ–¥–∫–∞–∑–∫—É"
          >
            <RefreshCw className={`h-4 w-4 ${regenerateMutation.isPending ? 'animate-spin' : ''}`} />
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        {isLoading ? (
          <div className="space-y-2">
            <div className="animate-pulse h-4 bg-purple-200 dark:bg-purple-700 rounded w-3/4" />
            <div className="animate-pulse h-4 bg-purple-200 dark:bg-purple-700 rounded w-1/2" />
          </div>
        ) : (
          <p className="text-base italic text-gray-700 dark:text-gray-300 leading-relaxed">
            "{insight}"
          </p>
        )}
      </CardContent>
    </Card>
  );
}
```

## –ö–ª—é—á–µ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:

1. **–ê–Ω—Ç–∏–¥–æ—Ç—ã –±–µ–∑ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü** - –≤—ã—á–∏—Å–ª—è—é—Ç—Å—è –Ω–∞ –ª–µ—Ç—É
2. **–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã** - –≤—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∑–∞–ø–∏—Å–∏
3. **GPT-4o** –≤–º–µ—Å—Ç–æ GPT-4 - –±—ã—Å—Ç—Ä–µ–µ –∏ –¥–µ—à–µ–≤–ª–µ
4. **React Query** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
5. **–†–∞–∑–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∞–Ω—Ç–∏–¥–æ—Ç–æ–≤** - –±–æ–ª–µ–µ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
6. **–£–º–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ AI-–ø–æ–¥—Å–∫–∞–∑–æ–∫** - —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –Ω–∞ –¥–µ–Ω—å —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è