Создай недостающие компоненты для дашборда приложения "Кармічний щоденник".

1. Создай компонент быстрого добавления записи `/client/src/components/JournalQuickAdd.tsx`:
```typescript
import { useState } from 'react';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { useTranslation } from 'react-i18next';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Label } from '@/components/ui/label';
import { Heart, Sparkles, HandHeart, Loader2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { authUtils } from '@/utils/auth';

interface JournalQuickAddProps {
  onSuccess?: () => void;
}

export function JournalQuickAdd({ onSuccess }: JournalQuickAddProps) {
  const { t } = useTranslation(['journal', 'common']);
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [category, setCategory] = useState('kindness');
  const [description, setDescription] = useState('');

  const addEntryMutation = useMutation({
    mutationFn: async (data: { category: string; description: string }) => {
      const res = await fetch('/api/journal-entries', {
        method: 'POST',
        headers: {
          ...authUtils.getAuthHeaders(),
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      });
      
      if (!res.ok) {
        const error = await res.json();
        throw new Error(error.error || 'Failed to add entry');
      }
      
      return res.json();
    },
    onSuccess: () => {
      toast({
        title: t('common:success'),
        description: t('journal:entryAdded')
      });
      setDescription('');
      queryClient.invalidateQueries({ queryKey: ['journal-entries'] });
      queryClient.invalidateQueries({ queryKey: ['karma-stats'] });
      queryClient.invalidateQueries({ queryKey: ['user-profile'] });
      onSuccess?.();
    },
    onError: (error: Error) => {
      toast({
        title: t('common:error'),
        description: error.message,
        variant: 'destructive'
      });
    }
  });

  const categories = [
    { value: 'kindness', label: t('journal:categories.kindness'), icon: Heart, color: 'text-pink-600' },
    { value: 'gratitude', label: t('journal:categories.gratitude'), icon: Sparkles, color: 'text-purple-600' },
    { value: 'help', label: t('journal:categories.help'), icon: HandHeart, color: 'text-blue-600' }
  ];

  const handleSubmit = () => {
    if (!description.trim()) {
      toast({
        title: t('common:error'),
        description: t('journal:emptyDescription'),
        variant: 'destructive'
      });
      return;
    }

    addEntryMutation.mutate({ category, description });
  };

  return (
    <div className="space-y-4">
      <RadioGroup value={category} onValueChange={setCategory}>
        <div className="grid grid-cols-3 gap-2">
          {categories.map((cat) => {
            const Icon = cat.icon;
            return (
              <Label
                key={cat.value}
                htmlFor={cat.value}
                className={`flex flex-col items-center gap-2 p-3 rounded-lg border-2 cursor-pointer transition-all ${
                  category === cat.value
                    ? 'border-primary bg-primary/5'
                    : 'border-muted hover:border-primary/50'
                }`}
              >
                <RadioGroupItem value={cat.value} id={cat.value} className="sr-only" />
                <Icon className={`w-6 h-6 ${cat.color}`} />
                <span className="text-xs text-center">{cat.label}</span>
              </Label>
            );
          })}
        </div>
      </RadioGroup>

      <Textarea
        placeholder={t('journal:placeholder')}
        value={description}
        onChange={(e) => setDescription(e.target.value)}
        rows={3}
        className="resize-none"
      />

      <Button
        onClick={handleSubmit}
        disabled={addEntryMutation.isPending || !description.trim()}
        className="w-full"
      >
        {addEntryMutation.isPending ? (
          <Loader2 className="w-4 h-4 mr-2 animate-spin" />
        ) : (
          <Heart className="w-4 h-4 mr-2" />
        )}
        {t('journal:addEntry')}
      </Button>
    </div>
  );
}

Создай компонент статистики карми /client/src/components/KarmaStats.tsx:

typescriptimport { useQuery } from '@tanstack/react-query';
import { useTranslation } from 'react-i18next';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { TrendingUp, TrendingDown, Activity, Calendar } from 'lucide-react';
import { authUtils } from '@/utils/auth';
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  AreaChart,
  Area
} from 'recharts';

export function KarmaStats() {
  const { t } = useTranslation(['stats', 'common']);

  const { data: stats, isLoading } = useQuery({
    queryKey: ['karma-stats'],
    queryFn: async () => {
      const res = await fetch('/api/stats/karma', {
        headers: authUtils.getAuthHeaders()
      });
      if (!res.ok) throw new Error('Failed to fetch stats');
      return res.json();
    }
  });

  if (isLoading) {
    return <div className="text-center p-8">{t('common:loading')}</div>;
  }

  // Подготавливаем данные для графика
  const last7Days = [];
  for (let i = 6; i >= 0; i--) {
    const date = new Date();
    date.setDate(date.getDate() - i);
    last7Days.push({
      date: date.toLocaleDateString('uk-UA', { weekday: 'short' }),
      karma: Math.floor(Math.random() * 20) + 5 // Временные данные
    });
  }

  return (
    <div className="space-y-6">
      {/* Overview Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="pb-2">
            <CardDescription>{t('stats:totalKarma')}</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats?.totalKarma || 0}</div>
            <div className="flex items-center text-sm text-muted-foreground mt-1">
              <TrendingUp className="w-4 h-4 text-green-600 mr-1" />
              <span className="text-green-600">
                +{stats?.todayKarma || 0} {t('stats:today')}
              </span>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardDescription>{t('stats:currentStreak')}</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats?.currentStreak || 0} {t('stats:days')}</div>
            <Progress value={(stats?.currentStreak || 0) * 10} className="mt-2" />
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardDescription>{t('stats:totalEntries')}</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats?.totalEntries || 0}</div>
            <div className="text-sm text-muted-foreground mt-1">
              {t('stats:thisMonth')}: {stats?.monthlyEntries || 0}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardDescription>{t('stats:averageKarma')}</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {((stats?.totalKarma || 0) / Math.max(stats?.totalEntries || 1, 1)).toFixed(1)}
            </div>
            <div className="text-sm text-muted-foreground mt-1">
              {t('stats:perEntry')}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Weekly Chart */}
      <Card>
        <CardHeader>
          <CardTitle>{t('stats:weeklyActivity')}</CardTitle>
          <CardDescription>{t('stats:last7Days')}</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="h-[300px]">
            <ResponsiveContainer width="100%" height="100%">
              <AreaChart data={last7Days}>
                <defs>
                  <linearGradient id="karmaGradient" x1="0" y1="0" x2="0" y2="1">
                    <stop offset="5%" stopColor="#8b5cf6" stopOpacity={0.3}/>
                    <stop offset="95%" stopColor="#8b5cf6" stopOpacity={0}/>
                  </linearGradient>
                </defs>
                <CartesianGrid strokeDasharray="3 3" className="stroke-muted" />
                <XAxis dataKey="date" className="text-xs" />
                <YAxis className="text-xs" />
                <Tooltip 
                  contentStyle={{ 
                    backgroundColor: 'hsl(var(--card))',
                    border: '1px solid hsl(var(--border))',
                    borderRadius: '8px'
                  }}
                />
                <Area
                  type="monotone"
                  dataKey="karma"
                  stroke="#8b5cf6"
                  strokeWidth={2}
                  fill="url(#karmaGradient)"
                />
              </AreaChart>
            </ResponsiveContainer>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

Создай компонент достижений /client/src/components/Achievements.tsx:

typescriptimport { useQuery } from '@tanstack/react-query';
import { useTranslation } from 'react-i18next';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Trophy, Lock, Star, Flame, Heart, Target } from 'lucide-react';
import { authUtils } from '@/utils/auth';

export function Achievements() {
  const { t } = useTranslation(['achievements', 'common']);

  const { data: achievements, isLoading } = useQuery({
    queryKey: ['achievements'],
    queryFn: async () => {
      const res = await fetch('/api/achievements', {
        headers: authUtils.getAuthHeaders()
      });
      if (!res.ok) throw new Error('Failed to fetch achievements');
      return res.json();
    }
  });

  if (isLoading) {
    return <div className="text-center p-8">{t('common:loading')}</div>;
  }

  const allAchievements = [
    {
      id: 'first_entry',
      title: t('achievements:types.first_entry.title'),
      description: t('achievements:types.first_entry.description'),
      icon: Star,
      color: 'text-yellow-500',
      unlocked: achievements?.some(a => a.type === 'first_entry')
    },
    {
      id: '7_days_streak',
      title: t('achievements:types.7_days_streak.title'),
      description: t('achievements:types.7_days_streak.description'),
      icon: Flame,
      color: 'text-orange-500',
      unlocked: achievements?.some(a => a.type === '7_days_streak')
    },
    {
      id: 'gratitude_master',
      title: t('achievements:types.gratitude_master.title'),
      description: t('achievements:types.gratitude_master.description'),
      icon: Heart,
      color: 'text-pink-500',
      unlocked: achievements?.some(a => a.type === 'gratitude_master')
    }
  ];

  const unlockedCount = allAchievements.filter(a => a.unlocked).length;

  return (
    <div className="space-y-6">
      {/* Summary */}
      <Card>
        <CardHeader>
          <CardTitle>{t('achievements:title')}</CardTitle>
          <CardDescription>
            {t('achievements:unlocked', { 
              count: unlockedCount,
              total: allAchievements.length
            })}
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Progress 
            value={(unlockedCount / allAchievements.length) * 100} 
            className="h-3"
          />
        </CardContent>
      </Card>

      {/* Achievements Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {allAchievements.map((achievement) => {
          const Icon = achievement.icon;
          
          return (
            <Card 
              key={achievement.id}
              className={`relative overflow-hidden transition-all ${
                achievement.unlocked 
                  ? 'border-primary/50 shadow-md' 
                  : 'opacity-75'
              }`}
            >
              {achievement.unlocked && (
                <div className="absolute top-2 right-2">
                  <Badge variant="default" className="text-xs">
                    {t('achievements:earned')}
                  </Badge>
                </div>
              )}
              
              <CardHeader>
                <div className="flex items-center gap-3">
                  <div className={`p-3 rounded-full ${
                    achievement.unlocked 
                      ? 'bg-primary/10' 
                      : 'bg-muted'
                  }`}>
                    {achievement.unlocked ? (
                      <Icon className={`w-8 h-8 ${achievement.color}`} />
                    ) : (
                      <Lock className="w-8 h-8 text-muted-foreground" />
                    )}
                  </div>
                  <div>
                    <CardTitle className="text-lg">
                      {achievement.title}
                    </CardTitle>
                    <CardDescription>
                      {achievement.description}
                    </CardDescription>
                  </div>
                </div>
              </CardHeader>
            </Card>
          );
        })}
      </div>
    </div>
  );
}

Добавь недостающие переводы в /client/src/locales/uk/journal.json:

json{
  "categories": {
    "kindness": "Доброта",
    "gratitude": "Вдячність",
    "help": "Допомога"
  },
  "placeholder": "Опиши свою добру справу або за що ти вдячний...",
  "addEntry": "Додати запис",
  "entryAdded": "Запис успішно додано!",
  "emptyDescription": "Будь ласка, опиши свою добру справу"
}

Добавь переводы для статистики в /client/src/locales/uk/stats.json:

json{
  "totalKarma": "Загальна карма",
  "currentStreak": "Поточна серія",
  "totalEntries": "Всього записів",
  "averageKarma": "Середня карма",
  "today": "сьогодні",
  "days": "днів",
  "thisMonth": "Цього місяця",
  "perEntry": "за запис",
  "weeklyActivity": "Тижнева активність",
  "last7Days": "Останні 7 днів"
}

Подключи новые компоненты в главный index /server/index.ts:

typescript// Добавь импорт
import achievementRoutes from "./routes/achievements";
import statsRoutes from "./routes/stats";

// После других app.use() добавь:
app.use(achievementRoutes);
app.use(statsRoutes);