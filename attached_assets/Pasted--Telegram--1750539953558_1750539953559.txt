# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ Telegram

## –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö:

```typescript
// server/services/reminderService.ts

async function sendPrincipleReminder(user: User, principleId: number) {
  const principle = PRINCIPLES.find(p => p.id === principleId);
  if (!principle) return;

  const message = `
üéØ **–ü—Ä–∏–Ω—Ü–∏–ø ${principleId}: ${principle.title}**

${principle.description}

_${principle.example}_

–ß–∞—Å –¥–ª—è —É—Å–≤—ñ–¥–æ–º–ª–µ–Ω–æ—ó –ø—Ä–∞–∫—Ç–∏–∫–∏ —Ü—å–æ–≥–æ –ø—Ä–∏–Ω—Ü–∏–ø—É.
`;

  if (user.telegramId) {
    await bot.telegram.sendMessage(user.telegramId, message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ', callback_data: `done_${principleId}` },
            { text: 'üìù –ó–∞–ø–∏—Å–∞—Ç–∏ –¥—É–º–∫–∏', callback_data: `journal_${principleId}` }
          ],
          [
            { text: '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', callback_data: `skip_${principleId}` },
            { text: 'üí° –ü—ñ–¥–∫–∞–∑–∫–∞ AI', callback_data: `ai_${principleId}` }
          ]
        ]
      }
    });
  }
}
```

## –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∫–Ω–æ–ø–æ–∫ –≤ Telegram –±–æ—Ç–µ:

```typescript
// server/bot/handlers.ts

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async (ctx) => {
  const callbackData = ctx.callbackQuery.data;
  const userId = ctx.from.id;
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const user = await db.select().from(users)
    .where(eq(users.telegramId, userId.toString()))
    .limit(1);
  
  if (!user[0]) {
    return ctx.answerCbQuery('–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —É –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É');
  }

  // –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
  const [action, principleId] = callbackData.split('_');
  const principleIdNum = parseInt(principleId);

  switch (action) {
    case 'done':
      await handlePrincipleDone(ctx, user[0].id, principleIdNum);
      break;
    case 'journal':
      await handleJournalPrompt(ctx, user[0].id, principleIdNum);
      break;
    case 'skip':
      await handleSkipPrinciple(ctx, user[0].id, principleIdNum);
      break;
    case 'ai':
      await handleAIInsight(ctx, user[0].id, principleIdNum);
      break;
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–í–∏–∫–æ–Ω–∞–Ω–æ"
async function handlePrincipleDone(ctx: any, userId: number, principleId: number) {
  try {
    // –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
    await db.insert(journalEntries).values({
      userId,
      principleId,
      content: '‚úÖ –ü—Ä–∏–Ω—Ü–∏–ø –≤–∏–∫–æ–Ω–∞–Ω–æ',
      mood: 'neutral',
      isCompleted: true,
      source: 'telegram_quick',
      createdAt: new Date()
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await updateUserStats(userId);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.editMessageText(
      ctx.callbackQuery.message.text + '\n\n‚úÖ **–í—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–æ!**',
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [[
            { text: 'üìù –î–æ–¥–∞—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä', callback_data: `journal_${principleId}` }
          ]]
        }
      }
    );

    await ctx.answerCbQuery('‚úÖ –ü—Ä–∏–Ω—Ü–∏–ø –≤—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–æ!');
  } catch (error) {
    await ctx.answerCbQuery('‚ùå –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ó–∞–ø–∏—Å–∞—Ç–∏ –¥—É–º–∫–∏"
async function handleJournalPrompt(ctx: any, userId: number, principleId: number) {
  const principle = PRINCIPLES.find(p => p.id === principleId);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏, –∫–∞–∫–æ–π –ø—Ä–∏–Ω—Ü–∏–ø –æ–±—Å—É–∂–¥–∞–µ–º
  await db.insert(userSessions).values({
    userId,
    telegramId: ctx.from.id,
    currentPrincipleContext: principleId,
    expiresAt: new Date(Date.now() + 30 * 60 * 1000) // 30 –º–∏–Ω—É—Ç
  }).onConflictDoUpdate({
    target: userSessions.telegramId,
    set: {
      currentPrincipleContext: principleId,
      expiresAt: new Date(Date.now() + 30 * 60 * 1000)
    }
  });

  await ctx.answerCbQuery();
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –Ω–∞–ø–∏—Å–∞—Ç—å
  await ctx.reply(
    `üìù –ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º–∏ –¥—É–º–∫–∞–º–∏ –ø—Ä–æ **${principle?.title}**\n\n` +
    `–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç, —ñ —è –∑–±–µ—Ä–µ–∂—É –π–æ–≥–æ —É –≤–∞—à–æ–º—É –¥–Ω–µ–≤–Ω–∏–∫—É.`,
    {
      parse_mode: 'Markdown',
      reply_markup: {
        force_reply: true,
        input_field_placeholder: '–í–∞—à—ñ —Ä–æ–∑–¥—É–º–∏ –ø—Ä–æ –ø—Ä–∏–Ω—Ü–∏–ø...'
      }
    }
  );
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"
async function handleSkipPrinciple(ctx: any, userId: number, principleId: number) {
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—Å–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  await db.insert(journalEntries).values({
    userId,
    principleId,
    content: '‚è≠Ô∏è –ü—Ä–∏–Ω—Ü–∏–ø –ø—Ä–æ–ø—É—â–µ–Ω–æ',
    mood: 'neutral',
    isCompleted: false,
    isSkipped: true,
    source: 'telegram_quick',
    createdAt: new Date()
  });

  await ctx.editMessageText(
    ctx.callbackQuery.message.text + '\n\n‚è≠Ô∏è **–ü—Ä–∏–Ω—Ü–∏–ø –ø—Ä–æ–ø—É—â–µ–Ω–æ**',
    { parse_mode: 'Markdown' }
  );

  await ctx.answerCbQuery('–ü—Ä–∏–Ω—Ü–∏–ø –ø—Ä–æ–ø—É—â–µ–Ω–æ. –ù—ñ—á–æ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, —Å–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É!');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ü—ñ–¥–∫–∞–∑–∫–∞ AI"
async function handleAIInsight(ctx: any, userId: number, principleId: number) {
  await ctx.answerCbQuery('–ì–µ–Ω–µ—Ä—É—é –ø—ñ–¥–∫–∞–∑–∫—É...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º AI –ø–æ–¥—Å–∫–∞–∑–∫—É
    const insight = await generateDailyInsight(principleId, userId);
    
    await ctx.reply(
      `üí° **AI-–ø—ñ–¥–∫–∞–∑–∫–∞ –¥–ª—è –ø—Ä–∏–Ω—Ü–∏–ø—É ${principleId}:**\n\n_"${insight}"_`,
      {
        parse_mode: 'Markdown',
        reply_to_message_id: ctx.callbackQuery.message.message_id,
        reply_markup: {
          inline_keyboard: [[
            { text: 'üìù –ó–∞–ø–∏—Å–∞—Ç–∏ —Ä–æ–∑–¥—É–º–∏', callback_data: `journal_${principleId}` },
            { text: 'üîÑ –Ü–Ω—à–∞ –ø—ñ–¥–∫–∞–∑–∫–∞', callback_data: `ai_refresh_${principleId}` }
          ]]
        }
      }
    );
  } catch (error) {
    await ctx.reply('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥–∫–∞–∑–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  const text = ctx.message.text;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø—Ä–∏–Ω—Ü–∏–ø–∞
  const session = await db.select().from(userSessions)
    .where(
      and(
        eq(userSessions.telegramId, userId.toString()),
        gt(userSessions.expiresAt, new Date())
      )
    )
    .limit(1);
  
  const user = await db.select().from(users)
    .where(eq(users.telegramId, userId.toString()))
    .limit(1);
  
  if (!user[0]) {
    return ctx.reply('–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å —É –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É: /start');
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–Ω—Ü–∏–ø –¥–ª—è –∑–∞–ø–∏—Å–∏
  const principleId = session[0]?.currentPrincipleContext || user[0].currentPrinciple || 1;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
  await db.insert(journalEntries).values({
    userId: user[0].id,
    principleId,
    content: text,
    mood: 'neutral',
    source: 'telegram',
    createdAt: new Date()
  });
  
  // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏
  if (session[0]) {
    await db.delete(userSessions).where(eq(userSessions.id, session[0].id));
  }
  
  const principle = PRINCIPLES.find(p => p.id === principleId);
  
  ctx.reply(
    `‚úÖ –ó–∞–ø–∏—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\n` +
    `üìå –ü—Ä–∏–Ω—Ü–∏–ø: **${principle?.title}**\n` +
    `üìù –í–∞—à –∑–∞–ø–∏—Å: "${text.substring(0, 50)}${text.length > 50 ? '...' : ''}"\n\n` +
    `–ß—É–¥–æ–≤–∞ —Ä–æ–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫—É —É—Å–≤—ñ–¥–æ–º–ª–µ–Ω–æ—Å—Ç—ñ üôè`,
    {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [[
          { text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', url: `${process.env.APP_URL}/dashboard` },
          { text: 'üìñ –í—Å—ñ –∑–∞–ø–∏—Å–∏', url: `${process.env.APP_URL}/journal` }
        ]]
      }
    }
  );
});
```

## –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î:

```sql
-- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
CREATE TABLE user_sessions (
  id SERIAL PRIMARY KEY,
  user_id INTEGER REFERENCES users(id),
  telegram_id VARCHAR(255) UNIQUE,
  current_principle_context INTEGER,
  expires_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT NOW()
);

-- –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ journal_entries –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
ALTER TABLE journal_entries 
ADD COLUMN is_completed BOOLEAN DEFAULT FALSE,
ADD COLUMN is_skipped BOOLEAN DEFAULT FALSE,
ADD COLUMN source VARCHAR(50) DEFAULT 'web';
-- source: 'web', 'telegram', 'telegram_quick'
```

## –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω—Ç–∏–¥–æ—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏:

```typescript
async function sendAntidoteReminder(userId: number, type: 'before' | 'after') {
  const user = await db.select().from(users).where(eq(users.id, userId)).limit(1);
  if (!user[0]) return;

  const messages = {
    before: {
      text: "‚è∞ –ß–µ—Ä–µ–∑ 30 —Ö–≤–∏–ª–∏–Ω ‚Äî —á–∞—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–Ω—Ü–∏–ø—É.\n\n–ü—ñ–¥–≥–æ—Ç—É–π—Ç–µ—Å—è –¥–æ —É—Å–≤—ñ–¥–æ–º–ª–µ–Ω–æ—ó –ø—Ä–∞–∫—Ç–∏–∫–∏ üßò",
      buttons: [[
        { text: 'üîî –ù–∞–≥–∞–¥–∞—Ç–∏ –∑–∞ 5 —Ö–≤', callback_data: 'remind_5min' },
        { text: 'üîï –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', callback_data: 'mute_next' }
      ]]
    },
    after: {
      text: "‚ú® –ß–∞—Å –ø—ñ–¥–≤–µ—Å—Ç–∏ –ø—ñ–¥—Å—É–º–∫–∏ –¥–Ω—è.\n\n–Ø–∫ –ø—Ä–æ–π—à–ª–∞ –ø—Ä–∞–∫—Ç–∏–∫–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ—Ö –ø—Ä–∏–Ω—Ü–∏–ø—ñ–≤?",
      buttons: [[
        { text: 'üìù –ù–∞–ø–∏—Å–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫', callback_data: 'daily_summary' },
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è', callback_data: 'daily_stats' }
      ]]
    }
  };

  const { text, buttons } = messages[type];

  if (user[0].telegramId) {
    await bot.telegram.sendMessage(user[0].telegramId, text, {
      reply_markup: {
        inline_keyboard: buttons
      }
    });
  }
}
```

## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

```typescript
// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
bot.command('stats', async (ctx) => {
  const userId = ctx.from.id;
  const user = await getUserByTelegramId(userId.toString());
  
  if (!user) {
    return ctx.reply('–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å: /start');
  }
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
  const stats = await db.select({
    principleId: journalEntries.principleId,
    completed: sql<number>`COUNT(CASE WHEN is_completed = true THEN 1 END)`,
    skipped: sql<number>`COUNT(CASE WHEN is_skipped = true THEN 1 END)`,
    written: sql<number>`COUNT(CASE WHEN content != '‚úÖ –ü—Ä–∏–Ω—Ü–∏–ø –≤–∏–∫–æ–Ω–∞–Ω–æ' AND content != '‚è≠Ô∏è –ü—Ä–∏–Ω—Ü–∏–ø –ø—Ä–æ–ø—É—â–µ–Ω–æ' THEN 1 END)`
  })
    .from(journalEntries)
    .where(
      and(
        eq(journalEntries.userId, user.id),
        gte(journalEntries.createdAt, sql`NOW() - INTERVAL '7 days'`)
      )
    )
    .groupBy(journalEntries.principleId);
  
  let message = 'üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤:**\n\n';
  
  stats.forEach(stat => {
    const principle = PRINCIPLES.find(p => p.id === stat.principleId);
    message += `**${principle?.title}**\n`;
    message += `‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ: ${stat.completed}\n`;
    message += `üìù –ó–∞–ø–∏—Å—ñ–≤: ${stat.written}\n`;
    message += `‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${stat.skipped}\n\n`;
  });
  
  const totalCompleted = stats.reduce((sum, s) => sum + Number(s.completed), 0);
  message += `\nüèÜ **–í—Å—å–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–æ:** ${totalCompleted} –ø—Ä–∏–Ω—Ü–∏–ø—ñ–≤`;
  
  ctx.reply(message, { parse_mode: 'Markdown' });
});
```

## –ö–ª—é—á–µ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:

1. **–ö–Ω–æ–ø–∫–∞ "–í–∏–∫–æ–Ω–∞–Ω–æ"** - –±—ã—Å—Ç—Ä–æ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞
2. **–ö–Ω–æ–ø–∫–∞ "–ó–∞–ø–∏—Å–∞—Ç–∏ –¥—É–º–∫–∏"** - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–ª—è –∑–∞–ø–∏—Å–∏ –º—ã—Å–ª–µ–π
3. **–ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"** - —á–µ—Å—Ç–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–ø—É—Å–∫
4. **–ö–Ω–æ–ø–∫–∞ "–ü—ñ–¥–∫–∞–∑–∫–∞ AI"** - –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
5. **–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏** - –±–æ—Ç –ø–æ–º–Ω–∏—Ç, –æ –∫–∞–∫–æ–º –ø—Ä–∏–Ω—Ü–∏–ø–µ –∏–¥–µ—Ç —Ä–µ—á—å
6. **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞** - –∫–æ–º–∞–Ω–¥–∞ /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
7. **–°—Å—ã–ª–∫–∏ –Ω–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ** - –±—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏