Обнови дашборд для интеграции всех новых компонентов в приложении "Кармічний щоденник".

Обнови страницу дашборда /client/src/pages/DashboardPage.tsx:

typescriptimport { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useTranslation } from 'react-i18next';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { Brain, TrendingUp, Trophy, Sparkles, ChevronRight } from 'lucide-react';
import { AIChat } from '@/components/AIChat';
import { JournalQuickAdd } from '@/components/JournalQuickAdd';
import { KarmaStats } from '@/components/KarmaStats';
import { Achievements } from '@/components/Achievements';
import { authUtils } from '@/utils/auth';
import { useToast } from '@/hooks/use-toast';

export default function DashboardPage() {
  const { t } = useTranslation(['dashboard', 'common']);
  const { toast } = useToast();
  const [activeTab, setActiveTab] = useState('overview');

  // Получаем данные пользователя
  const { data: user } = useQuery({
    queryKey: ['user-profile'],
    queryFn: async () => {
      const res = await fetch('/api/users/profile', {
        headers: authUtils.getAuthHeaders()
      });
      if (!res.ok) throw new Error('Failed to fetch profile');
      return res.json();
    }
  });

  // Получаем статистику
  const { data: stats } = useQuery({
    queryKey: ['karma-stats'],
    queryFn: async () => {
      const res = await fetch('/api/stats/karma', {
        headers: authUtils.getAuthHeaders()
      });
      if (!res.ok) throw new Error('Failed to fetch stats');
      return res.json();
    }
  });

  // Получаем подписку
  const { data: subscription } = useQuery({
    queryKey: ['current-subscription'],
    queryFn: async () => {
      const res = await fetch('/api/subscriptions/current', {
        headers: authUtils.getAuthHeaders()
      });
      if (!res.ok) throw new Error('Failed to fetch subscription');
      return res.json();
    }
  });

  // Получаем достижения
  const { data: achievements } = useQuery({
    queryKey: ['achievements'],
    queryFn: async () => {
      const res = await fetch('/api/achievements', {
        headers: authUtils.getAuthHeaders()
      });
      if (!res.ok) throw new Error('Failed to fetch achievements');
      return res.json();
    }
  });

  const getGreeting = () => {
    const hour = new Date().getHours();
    const name = user?.name || t('dashboard:user');
    
    if (hour < 12) return t('dashboard:greeting.morning', { name });
    if (hour < 18) return t('dashboard:greeting.afternoon', { name });
    return t('dashboard:greeting.evening', { name });
  };

  const getMotivationalQuote = () => {
    const quotes = [
      t('dashboard:quotes.0'),
      t('dashboard:quotes.1'),
      t('dashboard:quotes.2'),
      t('dashboard:quotes.3'),
      t('dashboard:quotes.4')
    ];
    const today = new Date().getDay();
    return quotes[today % quotes.length];
  };

  return (
    <div className="container max-w-7xl mx-auto py-8 px-4">
      {/* Header */}
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">{getGreeting()}</h1>
        <p className="text-muted-foreground">{getMotivationalQuote()}</p>
      </div>

      {/* Quick Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
        <Card>
          <CardHeader className="pb-2">
            <CardDescription>{t('dashboard:stats.totalKarma')}</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {stats?.totalKarma || 0}
              <span className="text-sm font-normal text-muted-foreground ml-2">
                {stats?.karmaChange >= 0 ? '+' : ''}{stats?.karmaChange || 0} {t('dashboard:stats.today')}
              </span>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardDescription>{t('dashboard:stats.streak')}</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              {stats?.currentStreak || 0} {t('dashboard:stats.days')}
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardDescription>{t('dashboard:stats.entries')}</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats?.totalEntries || 0}</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardDescription>{t('dashboard:stats.subscription')}</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex items-center gap-2">
              <Badge variant={subscription?.plan === 'pro' ? 'default' : 'secondary'}>
                {subscription?.plan ? t(`dashboard:plans.${subscription.plan}`) : t('dashboard:plans.none')}
              </Badge>
              {subscription?.plan !== 'pro' && (
                <Button variant="ghost" size="sm" asChild>
                  <a href="/subscriptions">
                    {t('dashboard:upgrade')}
                    <ChevronRight className="w-4 h-4 ml-1" />
                  </a>
                </Button>
              )}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Main Content */}
      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="overview" className="flex items-center gap-2">
            <Sparkles className="w-4 h-4" />
            {t('dashboard:tabs.overview')}
          </TabsTrigger>
          <TabsTrigger value="ai-chat" className="flex items-center gap-2">
            <Brain className="w-4 h-4" />
            {t('dashboard:tabs.aiChat')}
          </TabsTrigger>
          <TabsTrigger value="analytics" className="flex items-center gap-2">
            <TrendingUp className="w-4 h-4" />
            {t('dashboard:tabs.analytics')}
          </TabsTrigger>
          <TabsTrigger value="achievements" className="flex items-center gap-2">
            <Trophy className="w-4 h-4" />
            {t('dashboard:tabs.achievements')}
          </TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-4">
          <div className="grid md:grid-cols-2 gap-4">
            {/* Quick Add Journal Entry */}
            <Card>
              <CardHeader>
                <CardTitle>{t('dashboard:quickAdd.title')}</CardTitle>
                <CardDescription>{t('dashboard:quickAdd.description')}</CardDescription>
              </CardHeader>
              <CardContent>
                <JournalQuickAdd onSuccess={() => {
                  toast({
                    title: t('common:success'),
                    description: t('dashboard:quickAdd.success')
                  });
                }} />
              </CardContent>
            </Card>

            {/* Today's Progress */}
            <Card>
              <CardHeader>
                <CardTitle>{t('dashboard:progress.title')}</CardTitle>
                <CardDescription>{t('dashboard:progress.description')}</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <div className="flex justify-between text-sm mb-2">
                    <span>{t('dashboard:progress.positiveActions')}</span>
                    <span>{stats?.todayPositive || 0}/5</span>
                  </div>
                  <Progress value={(stats?.todayPositive || 0) * 20} />
                </div>
                <div>
                  <div className="flex justify-between text-sm mb-2">
                    <span>{t('dashboard:progress.gratitude')}</span>
                    <span>{stats?.todayGratitude || 0}/3</span>
                  </div>
                  <Progress value={(stats?.todayGratitude || 0) * 33.33} />
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Recent Achievements */}
          {achievements && achievements.length > 0 && (
            <Card>
              <CardHeader>
                <CardTitle>{t('dashboard:recentAchievements')}</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex gap-4 overflow-x-auto">
                  {achievements.slice(0, 3).map((achievement: any) => (
                    <div key={achievement.id} className="flex items-center gap-3 p-3 bg-muted rounded-lg min-w-[200px]">
                      <Trophy className="w-8 h-8 text-yellow-500" />
                      <div>
                        <p className="font-semibold">{achievement.title}</p>
                        <p className="text-sm text-muted-foreground">{achievement.description}</p>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}
        </TabsContent>

        <TabsContent value="ai-chat">
          <AIChat />
        </TabsContent>

        <TabsContent value="analytics">
          <KarmaStats />
        </TabsContent>

        <TabsContent value="achievements">
          <Achievements />
        </TabsContent>
      </Tabs>
    </div>
  );
}

Обнови навигацию /client/src/components/Layout.tsx:

typescriptimport { Link, useLocation } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
import { Home, BookOpen, BarChart3, Trophy, CreditCard, LogOut, Menu } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { LanguageSwitcher } from '@/components/LanguageSwitcher';
import { useAuth } from '@/hooks/useAuth';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

export function Layout({ children }: { children: React.ReactNode }) {
  const { t } = useTranslation(['nav', 'common']);
  const location = useLocation();
  const { user, logout } = useAuth();

  const navItems = [
    { path: '/dashboard', label: t('nav:dashboard'), icon: Home },
    { path: '/journal', label: t('nav:journal'), icon: BookOpen },
    { path: '/statistics', label: t('nav:statistics'), icon: BarChart3 },
    { path: '/achievements', label: t('nav:achievements'), icon: Trophy },
    { path: '/subscriptions', label: t('nav:subscriptions'), icon: CreditCard },
  ];

  return (
    <div className="min-h-screen bg-background">
      {/* Navigation */}
      <nav className="border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <div className="container max-w-7xl mx-auto px-4">
          <div className="flex h-16 items-center justify-between">
            <div className="flex items-center gap-6">
              <Link to="/dashboard" className="flex items-center gap-2">
                <span className="text-xl font-bold">{t('common:app.name')}</span>
              </Link>
              
              {/* Desktop Navigation */}
              <div className="hidden md:flex items-center gap-4">
                {navItems.map((item) => {
                  const Icon = item.icon;
                  return (
                    <Link
                      key={item.path}
                      to={item.path}
                      className={`flex items-center gap-2 px-3 py-2 rounded-md text-sm font-medium transition-colors ${
                        location.pathname === item.path
                          ? 'bg-primary/10 text-primary'
                          : 'text-muted-foreground hover:text-foreground hover:bg-muted'
                      }`}
                    >
                      <Icon className="w-4 h-4" />
                      {item.label}
                    </Link>
                  );
                })}
              </div>
            </div>

            <div className="flex items-center gap-4">
              <LanguageSwitcher />
              
              {/* User Menu */}
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" size="sm" className="flex items-center gap-2">
                    <div className="w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center">
                      {user?.name?.charAt(0).toUpperCase() || 'U'}
                    </div>
                    <span className="hidden md:inline">{user?.name}</span>
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-48">
                  <DropdownMenuItem asChild>
                    <Link to="/profile" className="flex items-center">
                      {t('nav:profile')}
                    </Link>
                  </DropdownMenuItem>
                  <DropdownMenuItem asChild>
                    <Link to="/settings" className="flex items-center">
                      {t('nav:settings')}
                    </Link>
                  </DropdownMenuItem>
                  <DropdownMenuSeparator />
                  <DropdownMenuItem onClick={logout} className="flex items-center text-red-600">
                    <LogOut className="w-4 h-4 mr-2" />
                    {t('nav:logout')}
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>

              {/* Mobile Menu */}
              <DropdownMenu>
                <DropdownMenuTrigger asChild className="md:hidden">
                  <Button variant="ghost" size="icon">
                    <Menu className="w-5 h-5" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-48">
                  {navItems.map((item) => {
                    const Icon = item.icon;
                    return (
                      <DropdownMenuItem key={item.path} asChild>
                        <Link to={item.path} className="flex items-center">
                          <Icon className="w-4 h-4 mr-2" />
                          {item.label}
                        </Link>
                      </DropdownMenuItem>
                    );
                  })}
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <main className="flex-1">
        {children}
      </main>
    </div>
  );
}

Создай роуты для достижений и статистики /server/routes/achievements.ts:

typescriptimport { Router } from 'express';
import { authenticate } from '../middleware/auth';
import { db } from '../db';
import { achievements, journalEntries } from '../db/schema';
import { eq, sql, and, gte } from 'drizzle-orm';

const router = Router();

router.get('/api/achievements', authenticate, async (req, res) => {
  try {
    const userId = req.user.id;
    
    // Получаем достижения пользователя
    const userAchievements = await db.query.achievements.findMany({
      where: eq(achievements.userId, userId)
    });
    
    // Проверяем новые достижения
    await checkAchievements(userId);
    
    res.json(userAchievements);
  } catch (error) {
    console.error('Achievements error:', error);
    res.status(500).json({ error: 'Failed to fetch achievements' });
  }
});

async function checkAchievements(userId: number) {
  const entries = await db.query.journalEntries.findMany({
    where: eq(journalEntries.userId, userId)
  });
  
  // Проверка первой записи
  if (entries.length >= 1) {
    await unlockAchievement(userId, 'first_entry');
  }
  
  // Проверка 10 записей благодарности
  const gratitudeCount = entries.filter(e => e.category === 'gratitude').length;
  if (gratitudeCount >= 10) {
    await unlockAchievement(userId, 'gratitude_master');
  }
  
  // Проверка серии дней
  const dates = [...new Set(entries.map(e => 
    new Date(e.createdAt).toDateString()
  ))].sort((a, b) => new Date(b).getTime() - new Date(a).getTime());
  
  let currentStreak = 0;
  const today = new Date();
  for (let i = 0; i < dates.length; i++) {
    const expectedDate = new Date(today);
    expectedDate.setDate(expectedDate.getDate() - i);
    
    if (dates[i] === expectedDate.toDateString()) {
      currentStreak++;
    } else {
      break;
    }
  }
  
  if (currentStreak >= 7) {
    await unlockAchievement(userId, '7_days_streak');
  }
}

async function unlockAchievement(userId: number, type: string) {
  const existing = await db.query.achievements.findFirst({
    where: and(
      eq(achievements.userId, userId),
      eq(achievements.type, type)
    )
  });
  
  if (!existing) {
    await db.insert(achievements).values({
      userId,
      type,
      unlockedAt: new Date()
    });
  }
}

export default router;

Создай роуты для статистики /server/routes/stats.ts:

typescriptimport { Router } from 'express';
import { authenticate } from '../middleware/auth';
import { db } from '../db';
import { journalEntries } from '../db/schema';
import { eq, gte, and, sql } from 'drizzle-orm';

const router = Router();

router.get('/api/stats/karma', authenticate, async (req, res) => {
  try {
    const userId = req.user.id;
    
    // Получаем общую статистику
    const totalKarmaResult = await db
      .select({ total: sql<number>`COALESCE(SUM(karma_points), 0)` })
      .from(journalEntries)
      .where(eq(journalEntries.userId, userId));
    
    const totalKarma = totalKarmaResult[0]?.total || 0;
    
    // Подсчет записей
    const totalEntriesResult = await db
      .select({ count: sql<number>`COUNT(*)` })
      .from(journalEntries)
      .where(eq(journalEntries.userId, userId));
    
    const totalEntries = totalEntriesResult[0]?.count || 0;
    
    // Карма за сегодня
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const todayKarmaResult = await db
      .select({ total: sql<number>`COALESCE(SUM(karma_points), 0)` })
      .from(journalEntries)
      .where(and(
        eq(journalEntries.userId, userId),
        gte(journalEntries.createdAt, today)
      ));
    
    const todayKarma = todayKarmaResult[0]?.total || 0;
    
    // Подсчет серии дней
    const entries = await db.query.journalEntries.findMany({
      where: eq(journalEntries.userId, userId),
      orderBy: (entries, { desc }) => [desc(entries.createdAt)]
    });
    
    const dates = [...new Set(entries.map(e => 
      new Date(e.createdAt).toDateString()
    ))].sort((a, b) => new Date(b).getTime() - new Date(a).getTime());
    
    let currentStreak = 0;
    const now = new Date();
    for (let i = 0; i < dates.length; i++) {
      const expectedDate = new Date(now);
      expectedDate.setDate(expectedDate.getDate() - i);
      
      if (dates[i] === expectedDate.toDateString()) {
        currentStreak++;
      } else {
        break;
      }
    }
    
    // Подсчет записей за месяц
    const monthAgo = new Date();
    monthAgo.setMonth(monthAgo.getMonth() - 1);
    
    const monthlyEntriesResult = await db
      .select({ count: sql<number>`COUNT(*)` })
      .from(journalEntries)
      .where(and(
        eq(journalEntries.userId, userId),
        gte(journalEntries.createdAt, monthAgo)
      ));
    
    const monthlyEntries = monthlyEntriesResult[0]?.count || 0;
    
    // Подсчет позитивных действий за сегодня
    const todayPositiveResult = await db
      .select({ count: sql<number>`COUNT(*)` })
      .from(journalEntries)
      .where(and(
        eq(journalEntries.userId, userId),
        gte(journalEntries.createdAt, today),
        sql`category IN ('kindness', 'help')`
      ));
    
    const todayPositive = todayPositiveResult[0]?.count || 0;
    
    // Подсчет благодарностей за сегодня
    const todayGratitudeResult = await db
      .select({ count: sql<number>`COUNT(*)` })
      .from(journalEntries)
      .where(and(
        eq(journalEntries.userId, userId),
        gte(journalEntries.createdAt, today),
        eq(journalEntries.category, 'gratitude')
      ));
    
    const todayGratitude = todayGratitudeResult[0]?.count || 0;
    
    res.json({
      totalKarma,
      totalEntries,
      todayKarma,
      karmaChange: todayKarma,
      currentStreak,
      monthlyEntries,
      todayPositive,
      todayGratitude
    });
  } catch (error) {
    console.error('Stats error:', error);
    res.status(500).json({ error: 'Failed to fetch stats' });
  }
});

export default router;

Добавь переводы для дашборда /client/src/locales/uk/dashboard.json:

json{
  "user": "Користувач",
  "greeting": {
    "morning": "Доброго ранку, {{name}}!",
    "afternoon": "Добрий день, {{name}}!",
    "evening": "Добрий вечір, {{name}}!"
  },
  "quotes": [
    "Кожен добрий вчинок - це крок до кращого світу",
    "Твоя карма - це енергія, яку ти випромінюєш у світ",
    "Маленькі добрі справи створюють великі зміни",
    "Будь змінами, які хочеш бачити у світі",
    "Позитивна карма повертається сторицею"
  ],
  "stats": {
    "totalKarma": "Загальна карма",
    "today": "сьогодні",
    "streak": "Серія днів",
    "days": "днів",
    "entries": "Записів",
    "subscription": "Підписка"
  },
  "plans": {
    "none": "Безкоштовний",
    "light": "Лайт",
    "plus": "Плюс",
    "pro": "Про"
  },
  "upgrade": "Покращити",
  "tabs": {
    "overview": "Огляд",
    "aiChat": "AI-чат",
    "analytics": "Аналітика",
    "achievements": "Досягнення"
  },
  "quickAdd": {
    "title": "Швидкий запис",
    "description": "Додай добру справу або подяку",
    "success": "Запис додано!"
  },
  "progress": {
    "title": "Прогрес сьогодні",
    "description": "Твої досягнення за день",
    "positiveActions": "Позитивні дії",
    "gratitude": "Подяки"
  },
  "recentAchievements": "Останні досягнення"
}

Добавь переводы для навигации /client/src/locales/uk/nav.json:

json{
  "dashboard": "Головна",
  "journal": "Щоденник",
  "statistics": "Статистика",
  "achievements": "Досягнення",
  "subscriptions": "Підписка",
  "profile": "Профіль",
  "settings": "Налаштування",
  "logout": "Вийти"
}