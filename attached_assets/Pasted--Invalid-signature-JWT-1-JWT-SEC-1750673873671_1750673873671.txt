–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫—É "Invalid signature" –¥–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.

1. –ü—Ä–æ–≤–µ—Ä—å –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π JWT_SECRET –≤ `/server/auth.ts`:
```typescript
import jwt from "jsonwebtoken";
import bcrypt from "bcryptjs";
import { db } from "./db";
import { users } from "./db/schema";
import { eq } from "drizzle-orm";

// –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç
const JWT_SECRET = process.env.JWT_SECRET || "your-secret-key";

console.log('üîë JWT_SECRET configured:', JWT_SECRET ? 'Yes' : 'No');
console.log('üîë JWT_SECRET length:', JWT_SECRET?.length);

export async function hashPassword(password: string): Promise<string> {
  return bcrypt.hash(password, 10);
}

export async function comparePasswords(password: string, hash: string): Promise<boolean> {
  return bcrypt.compare(password, hash);
}

export function generateToken(userId: number): string {
  console.log('üé´ Generating token for user:', userId);
  console.log('üîë Using JWT_SECRET:', JWT_SECRET.substring(0, 10) + '...');
  
  const token = jwt.sign(
    { userId }, 
    JWT_SECRET,
    { expiresIn: "30d" }
  );
  
  console.log('‚úÖ Token generated successfully');
  return token;
}

export function verifyToken(token: string): { userId: number } {
  try {
    console.log('üîç Verifying token...');
    console.log('üîë Using JWT_SECRET:', JWT_SECRET.substring(0, 10) + '...');
    
    const decoded = jwt.verify(token, JWT_SECRET) as { userId: number };
    console.log('‚úÖ Token verified, userId:', decoded.userId);
    
    return decoded;
  } catch (error) {
    console.error('‚ùå Token verification failed:', error.message);
    throw error;
  }
}

export async function authenticateUser(email: string, password: string) {
  console.log('üîê Authenticating user:', email);
  
  const user = await db.query.users.findFirst({
    where: eq(users.email, email),
  });

  if (!user) {
    console.log('‚ùå User not found');
    throw new Error("Invalid credentials");
  }

  const isValidPassword = await comparePasswords(password, user.password);
  if (!isValidPassword) {
    console.log('‚ùå Invalid password');
    throw new Error("Invalid credentials");
  }

  console.log('‚úÖ User authenticated successfully');
  const token = generateToken(user.id);
  
  return {
    token,
    user: {
      id: user.id,
      email: user.email,
      name: user.name,
      telegramId: user.telegramId,
      onboardingCompleted: user.onboardingCompleted,
      subscription: user.subscription || 'none',
      preferredLanguage: user.preferredLanguage || 'uk'
    },
  };
}

–û–±–Ω–æ–≤–∏ middleware –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ /server/middleware/auth.ts:

typescriptimport { Request, Response, NextFunction } from "express";
import { verifyToken } from "../auth";

interface AuthRequest extends Request {
  user?: { id: number };
}

export function authenticate(req: AuthRequest, res: Response, next: NextFunction) {
  try {
    const authHeader = req.headers.authorization;
    console.log('üîê Auth middleware - Header:', authHeader ? 'Present' : 'Missing');

    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      console.log('‚ùå Invalid authorization header format');
      return res.status(401).json({ message: "No valid authorization header" });
    }

    const token = authHeader.substring(7);
    console.log('üé´ Token extracted, length:', token.length);
    console.log('üé´ Token preview:', token.substring(0, 20) + '...');

    try {
      const decoded = verifyToken(token);
      req.user = { id: decoded.userId };
      console.log('‚úÖ Auth middleware - User authenticated:', decoded.userId);
      next();
    } catch (error) {
      console.error('‚ùå Token verification error:', error);
      
      if (error.name === 'TokenExpiredError') {
        return res.status(403).json({ 
          message: "Token expired", 
          details: "Please login again" 
        });
      } else if (error.name === 'JsonWebTokenError') {
        return res.status(403).json({ 
          message: "Invalid token", 
          details: error.message 
        });
      }
      
      return res.status(403).json({ 
        message: "Invalid or expired token", 
        details: error.message 
      });
    }
  } catch (error) {
    console.error("‚ùå Auth middleware error:", error);
    return res.status(500).json({ message: "Authentication error" });
  }
}

–°–æ–∑–¥–∞–π —É—Ç–∏–ª–∏—Ç—É –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∞ /client/src/utils/auth-recovery.ts:

typescriptimport { authUtils } from './auth';

export function checkAuthError(error: any): boolean {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  if (error?.message?.includes('Invalid') || 
      error?.message?.includes('expired') ||
      error?.message?.includes('token') ||
      error?.status === 401 ||
      error?.status === 403) {
    return true;
  }
  return false;
}

export function handleAuthError() {
  console.log('üîÑ Handling auth error - clearing local storage and redirecting to login');
  
  // –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  authUtils.clearAuth();
  
  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
  window.location.href = '/';
}

–û–±–Ω–æ–≤–∏ DashboardPage –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ª–æ–≥–∏–Ω–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Ç–æ–∫–µ–Ω–∞ /client/src/pages/DashboardPage.tsx:

typescriptimport { checkAuthError, handleAuthError } from '@/utils/auth-recovery';

// –í –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ DashboardPage, –æ–±–Ω–æ–≤–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫:
const { data: user, error: userError, isLoading: userLoading } = useQuery({
  queryKey: ["user"],
  queryFn: async () => {
    try {
      const response = await fetch("/api/users/profile", {
        headers: authUtils.getAuthHeaders(),
      });
      
      console.log('Response status:', response.status);
      
      if (!response.ok) {
        const errorData = await response.json();
        console.error('Error response:', errorData);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π —Ç–æ–∫–µ–Ω–∞
        if (response.status === 403 || response.status === 401) {
          handleAuthError();
          return;
        }
        
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('User data received:', data);
      return data;
    } catch (error) {
      console.error('Fetch error:', error);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      if (checkAuthError(error)) {
        handleAuthError();
        return;
      }
      
      throw error;
    }
  },
  retry: false, // –û—Ç–∫–ª—é—á–∞–µ–º retry –¥–ª—è –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
});

–î–æ–±–∞–≤—å –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞ –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º /client/src/components/EmergencyLogout.tsx:

typescriptimport { Button } from '@/components/ui/button';
import { authUtils } from '@/utils/auth';
import { LogOut } from 'lucide-react';

export function EmergencyLogout() {
  const handleLogout = () => {
    authUtils.clearAuth();
    window.location.href = '/';
  };

  return (
    <Button 
      onClick={handleLogout}
      variant="ghost"
      size="sm"
      className="fixed bottom-4 right-4 opacity-50 hover:opacity-100"
    >
      <LogOut className="w-4 h-4 mr-2" />
      –í–∏–π—Ç–∏
    </Button>
  );
}

–í—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç EmergencyLogout –≤ App.tsx –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã—Ö–æ–¥–∞:

typescriptimport { EmergencyLogout } from '@/components/EmergencyLogout';

// –í –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ App, –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ä–æ—É—Ç–æ–≤:
return (
  <div>
    {/* —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–æ—É—Ç—ã */}
    <EmergencyLogout />
  </div>
);