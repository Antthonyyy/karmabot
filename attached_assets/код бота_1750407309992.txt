import logging
import asyncio
import sqlite3
import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiohttp import ClientSession, web
import hmac
import hashlib


# Настройки WayForPay
MERCHANT_ACCOUNT = "freelance_user_63af558b3d522"
MERCHANT_SECRET_KEY = "891edf2459cba74d631b200c6c6dda97861fcb26"
MERCHANT_DOMAIN = "karmabot.server-vps.com"
WAYFORPAY_API_URL = "https://api.wayforpay.com/api"


API_TOKEN = '7770112358:AAGveMFZllfzf_kC4miKx8p0ntZOK4ldl30'


# Путь к базе данных
DB_PATH = r"D:\karmabot\db\users.db"


# Настройка логирования на уровне DEBUG, чтобы видеть отладочные сообщения
logging.basicConfig(level=logging.DEBUG)


def execute_db_query(db_path, query, params=()):
    """Выполняет запрос к базе данных и возвращает результат."""
    try:
        with sqlite3.connect(db_path) as conn:
            c = conn.cursor()
            logging.debug(f"Executing query: {query} with params: {params}")
            c.execute(query, params)
            if query.strip().upper().startswith("SELECT"):
                result = c.fetchall()
                logging.debug(f"Query result: {result}")
                return result
            else:
                conn.commit()
                logging.debug("Query committed successfully.")
                return None
    except sqlite3.Error as e:
        logging.error(f"Database error: {e} while executing query: {query} with params: {params}")
        return None


def get_user_subscription(user_id):
    query = "SELECT subscription_end, payment_status FROM users WHERE user_id = ?"
    result = execute_db_query(DB_PATH, query, (user_id,))
    if result and len(result) > 0:
        return result[0]
    return (None, None)


async def generate_payment_link(user_id, amount=5):
    order_reference = str(user_id)
    order_date = int(datetime.datetime.now().timestamp())
    currency = "EUR"
    product_name = ["Кармічний щоденник"]
    product_price = [amount]
    product_count = [1]


    data_to_sign = [
        MERCHANT_ACCOUNT,
        order_reference,
        str(order_date),
        str(amount),
        currency,
        *product_name,
        *map(str, product_count),
        *map(str, product_price)
    ]
    data_string = ";".join(data_to_sign)
    logging.info(f"WayForPay data string for signature: {data_string}")


    signature = hmac.new(
        MERCHANT_SECRET_KEY.encode(),
        data_string.encode(),
        hashlib.md5
    ).hexdigest()


    payload = {
        "transactionType": "CREATE_INVOICE",
        "merchantAccount": MERCHANT_ACCOUNT,
        "merchantDomainName": MERCHANT_DOMAIN,
        "merchantSignature": signature,
        "apiVersion": 1,
        "orderReference": order_reference,
        "orderDate": order_date,
        "amount": amount,
        "currency": currency,
        "productName": product_name,
        "productCount": product_count,
        "productPrice": product_price,
        "clientFirstName": "User",
        "clientLastName": str(user_id),
        "returnUrl": f"https://t.me/{(await bot.get_me()).username}",
        "serviceUrl": f"https://{MERCHANT_DOMAIN}/wayforpay_webhook"
    }


    async with ClientSession() as session:
        async with session.post(WAYFORPAY_API_URL, json=payload) as response:
            result = await response.json()
            if result.get("reasonCode") == 1100:
                return result.get("invoiceUrl")
            else:
                logging.error(f"Ошибка при создании ссылки на оплату: {result}")
                return None


# Словарь принципов
principles = {
    1: ("Принцип 1: Не шкодь іншим.", "Захист життя / Незбереження життя", "https://vitalinapetrova.com.ua/karma-chelendzh/1"),
    2: ("Принцип 2: Говори правду.", "Щедрість / Крадіжки. Збереження чужого майна / Пошкодження чужого майна", "https://vitalinapetrova.com.ua/karma-chelendzh/2"),
    3: ("Принцип 3: Не кради.", "Повага / Неповага відносин", "https://vitalinapetrova.com.ua/karma-chelendzh/3"),
    4: ("Принцип 4: Поважай інших.", "Правдива мова / Брехня", "https://vitalinapetrova.com.ua/karma-chelendzh/4"),
    5: ("Принцип 5: Будь вдячним.", "З’єднувальна / Роз’єднувальна мова", "https://vitalinapetrova.com.ua/karma-chelendzh/5"),
    6: ("Принцип 6: Дбай про природу.", "М'яка мова / Груба мова", "https://vitalinapetrova.com.ua/karma-chelendzh/6"),
    7: ("Принцип 7: Заздрість.", "Значима мова / Пусті розмови", "https://vitalinapetrova.com.ua/karma-chelendzh/7"),
    8: ("Принцип 8: Допомагай іншим.", "Радість успіхам інших / Заздрість", "https://vitalinapetrova.com.ua/karma-chelendzh/8"),
    9: ("Принцип 9: Розвивайся.", "Співчуття / Недоброзичливість", "https://vitalinapetrova.com.ua/karma-chelendzh/9"),
    10: ("Принцип 10: Живи з любов’ю.", "Правильний / Неправильний світогляд", "https://vitalinapetrova.com.ua/karma-chelendzh/10"),
}


# Инициализация базы данных
def init_db():
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                first_name TEXT,
                current_principle INTEGER DEFAULT 1,
                timezone_offset INTEGER DEFAULT 0,
                notification_type TEXT DEFAULT 'daily',
                custom_times TEXT,
                last_sent TEXT,
                paid INTEGER DEFAULT 0,
                subscription_end TEXT,
                payment_status TEXT DEFAULT 'inactive'
            )
        ''')
        conn.commit()


# Добавление или обновление пользователя
def add_or_update_user(user_id, first_name):
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute('''
            INSERT INTO users (user_id, first_name)
            VALUES (?, ?)
            ON CONFLICT(user_id) DO UPDATE SET first_name=excluded.first_name
        ''', (user_id, first_name))
        conn.commit()


# Обновление настроек напоминаний
def update_user_reminder(user_id, notification_type, custom_times=None):
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute('''
            UPDATE users
            SET notification_type = ?, custom_times = ?
            WHERE user_id = ?
        ''', (notification_type, custom_times, user_id))
        conn.commit()


# Обновление подписки
def update_subscription(user_id, subscription_end, payment_status):
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute('''
            UPDATE users
            SET subscription_end = ?, payment_status = ?
            WHERE user_id = ?
        ''', (subscription_end, payment_status, user_id))
        conn.commit()


# Инициализация бота
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


# Обработчик команды /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    add_or_update_user(user_id, first_name)


    subscription_end, payment_status = get_user_subscription(user_id)
    now = datetime.datetime.now()


    if subscription_end and payment_status == "active":
        try:
            sub_end_date = datetime.datetime.fromisoformat(subscription_end)
            if now < sub_end_date:
                keyboard = InlineKeyboardMarkup().add(
                    InlineKeyboardButton("🎥 Дивитися інструкцію", url="https://youtu.be/Q-uWeyHzkbI")
                )
                await message.answer(
                    f"Вітаю, {first_name}! 👋 ✨\n"
                    "Тут ви зможете щодня отримувати нагадування про кармічні принципи та вести свій щоденник 🧘‍♂️\n\n"
                    "🛠 Що робити далі?\n"
                    "1️⃣ Виберіть зручний для вас час нагадувань.\n"
                    "2️⃣ Почніть застосовувати кармічні принципи у своєму житті.\n\n"
                    "⏰ Нагадування приходять з 8:00 до 21:00.\n\n"
                    "📩 Питання? Тисніть «Техпідтримка» в меню.\n\n"
                    "Надсилаю вам коротку відеоінструкцію 👇",
                    reply_markup=keyboard
                )


                await asyncio.sleep(15)
                keyboard2 = InlineKeyboardMarkup().add(
                    InlineKeyboardButton("👉 Продовжити", callback_data="continue_setup")
                )
                await message.answer("Як будете готові — тисніть кнопку 👇", reply_markup=keyboard2)
                return
            else:
                update_subscription(user_id, subscription_end, "expired")
        except Exception as e:
            logging.error(f"Ошибка при проверке подписки для user_id {user_id}: {e}")


    payment_url = await generate_payment_link(user_id, amount=5)
    if payment_url:
        payment_keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("💳 Оплатити", url=payment_url)
        )
        await message.answer(
            "Вітаю! Для використання бота необхідно активувати підписку.\n"
            "Вартість підписки — 5 евро за місяць.\n"
            "Будь ласка, оплатіть підписку, щоб продовжити 😊",
            reply_markup=payment_keyboard
        )
    else:
        await message.answer("Виникла помилка при створенні посилання на оплату. Спробуйте пізніше або зверніться до техпідтримки.")


# Обработчик выбора частоты напоминаний
@dp.callback_query_handler(lambda c: c.data == 'continue_setup')
async def choose_reminder_frequency(callback_query: types.CallbackQuery):
    await callback_query.answer()
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("⏱ Кожні 2 години", callback_data="every_2"),
        InlineKeyboardButton("⏱ Кожні 2.5 години", callback_data="every_2.5"),
        InlineKeyboardButton("⏱ Кожні 3 години", callback_data="every_3"),
        InlineKeyboardButton("⏱ Кожні 4 години", callback_data="every_4"),
        InlineKeyboardButton("🕐 Один раз на день", callback_data="daily"),
        InlineKeyboardButton("🛠 Вибрати власноруч", callback_data="custom_time")
    )
    await callback_query.message.answer("Оберіть, як часто надсилати нагадування:", reply_markup=keyboard)


# Обработчик выбора ежедневного времени
@dp.callback_query_handler(lambda c: c.data == 'daily')
async def ask_daily_time(callback_query: types.CallbackQuery):
    await callback_query.answer()
    keyboard = InlineKeyboardMarkup(row_width=3)
    times = [f"{hour:02d}:00" for hour in range(8, 22)]
    buttons = [InlineKeyboardButton(time, callback_data=f"time_{time}") for time in times]
    keyboard.add(*buttons)
    await callback_query.message.answer("🕐 Оберіть зручний час для щоденного нагадування:", reply_markup=keyboard)


# Подтверждение ежедневного времени
@dp.callback_query_handler(lambda c: c.data.startswith("time_"))
async def confirm_daily_time(callback_query: types.CallbackQuery):
    await callback_query.answer()
    selected_time = callback_query.data.replace("time_", "")
    update_user_reminder(callback_query.from_user.id, 'daily', selected_time)
    await callback_query.message.answer(f"✅ Збережено! Нагадування щодня о {selected_time}")


# Подтверждение интервала (every_X)
@dp.callback_query_handler(lambda c: c.data.startswith("every_"))
async def confirm_interval(callback_query: types.CallbackQuery):
    await callback_query.answer()
    interval = callback_query.data.replace("every_", "")
    update_user_reminder(callback_query.from_user.id, f"every_{interval}", None)
    await callback_query.message.answer(f"✅ Збережено! Нагадування кожні {interval} години")


# Выбор пользовательского времени
@dp.callback_query_handler(lambda c: c.data == 'custom_time')
async def custom_time_keyboard(callback_query: types.CallbackQuery):
    await callback_query.answer()
    keyboard = InlineKeyboardMarkup(row_width=4)
    for hour in range(0, 24):
        for minute in range(0, 60, 15):
            time_str = f"{hour:02d}:{minute:02d}"
            keyboard.insert(InlineKeyboardButton(time_str, callback_data=f"custom_final_{time_str}"))
    await callback_query.message.answer("🕐 Оберіть точний час нагадування:", reply_markup=keyboard)


# Сохранение пользовательского времени
@dp.callback_query_handler(lambda c: c.data.startswith("custom_final_"))
async def save_final_custom_time(callback_query: types.CallbackQuery):
    await callback_query.answer()
    time_str = callback_query.data.replace("custom_final_", "")
    update_user_reminder(callback_query.from_user.id, 'daily', time_str)
    await callback_query.message.answer(f"✅ Збережено! Нагадування щодня о {time_str}")


# Обработчик команды /profile
@dp.message_handler(commands=['profile'])
async def user_profile(message: types.Message):
    with sqlite3.connect(DB_PATH) as conn:
        c = conn.cursor()
        c.execute("SELECT notification_type, custom_times, current_principle, subscription_end, payment_status FROM users WHERE user_id = ?", (message.from_user.id,))
        row = c.fetchone()


    if row:
        notif_type, custom_time, principle, subscription_end, payment_status = row
        text = (
            f"📊 *Ваш профіль:*\n"
            f"▪️ Тип нагадування: {notif_type}\n"
            f"▪️ Час: {custom_time or 'не вказано'}\n"
            f"▪️ Поточний принцип: {principle}\n"
            f"▪️ Статус підписки: {payment_status}\n"
            f"▪️ Підписка дійсна до: {subscription_end or 'не активна'}"
        )
    else:
        text = "Користувача не знайдено в базі 🧐"


    await message.answer(text, parse_mode="Markdown")


# Функция отправки основных напоминаний
async def send_reminders():
    while True:
        now = datetime.datetime.now()
        current_time = now.strftime("%H:%M")


        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("SELECT user_id, current_principle, notification_type, custom_times, payment_status, subscription_end FROM users")
            users = c.fetchall()


        for user_id, current, notif_type, times, payment_status, subscription_end in users:
            if payment_status != "active":
                continue
            if not subscription_end:
                continue
            try:
                sub_end_date = datetime.datetime.fromisoformat(subscription_end)
                if now > sub_end_date:
                    continue
            except Exception as e:
                logging.error(f"Ошибка при проверке подписки для user_id {user_id}: {e}")
                continue


            send = False


            if notif_type.startswith("every_"):
                interval = float(notif_type.split("_")[1])
                hour = now.hour + now.minute / 60
                if abs((hour % interval)) < 0.05:
                    send = True


            elif notif_type == "daily" and times:
                current_minutes = now.hour * 60 + now.minute
                try:
                    target_time = datetime.datetime.strptime(times, "%H:%M")
                    target_minutes = target_time.hour * 60 + target_time.minute
                    if abs(current_minutes - target_minutes) <= 1:
                        send = True
                except ValueError as e:
                    logging.error(f"Ошибка при разборе времени {times} для user_id {user_id}: {e}")


            if send:
                principle_text, principle_full_name, principle_url = principles[current]
                message_text = f"{principle_text}\n({principle_full_name})"
                keyboard = InlineKeyboardMarkup().add(
                    InlineKeyboardButton("Приклади", url=principle_url)
                )
                await bot.send_message(user_id, message_text, reply_markup=keyboard)
                await bot.send_message(user_id, "Напиши свої Плюси, мінуси та натидот")
                next_principle = current + 1 if current < 10 else 1
                with sqlite3.connect(DB_PATH) as conn:
                    c = conn.cursor()
                    c.execute("UPDATE users SET current_principle = ?, last_sent = ? WHERE user_id = ?",
                              (next_principle, now.isoformat(), user_id))
                    conn.commit()


        await asyncio.sleep(60)


# Функция отправки предварительных напоминаний
async def send_pre_reminders():
    while True:
        now = datetime.datetime.now()
        current_time = now.strftime("%H:%M")


        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("SELECT user_id, notification_type, custom_times, payment_status, subscription_end FROM users")
            users = c.fetchall()


        for user_id, notif_type, times, payment_status, subscription_end in users:
            if payment_status != "active":
                continue
            if not subscription_end:
                continue
            try:
                sub_end_date = datetime.datetime.fromisoformat(subscription_end)
                if now > sub_end_date:
                    continue
            except Exception as e:
                logging.error(f"Ошибка при проверке подписки для user_id {user_id}: {e}")
                continue


            if notif_type.startswith("every_"):
                interval = float(notif_type.split("_")[1])
                hour = now.hour + now.minute / 60
                if abs(((hour + 0.5) % interval)) < 0.05:
                    await bot.send_message(user_id, "Нагадую за виконання антидоту 😇")


            elif notif_type == "daily" and times:
                try:
                    target_time = datetime.datetime.strptime(times, "%H:%M")
                    delta = datetime.timedelta(minutes=30)
                    pre_time = (target_time - delta)
                    pre_minutes = pre_time.hour * 60 + pre_time.minute
                    current_minutes = now.hour * 60 + now.minute
                    if abs(current_minutes - pre_minutes) <= 1:
                        await bot.send_message(user_id, "Нагадую за виконання антидоту 😇")
                except Exception as e:
                    logging.error(f"Ошибка при обработке времени для user_id {user_id}: {e}")
                    continue


        await asyncio.sleep(60)


# Проверка окончания подписки (напоминание за 3 дня)
async def check_subscription_expiry():
    while True:
        now = datetime.datetime.now()
        three_days_later = now + datetime.timedelta(days=3)
        two_days_later = now + datetime.timedelta(days=2)


        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("SELECT user_id, subscription_end, payment_status FROM users WHERE payment_status = 'active'")
            users = c.fetchall()


        for user_id, subscription_end, payment_status in users:
            if not subscription_end:
                continue
            try:
                sub_end_date = datetime.datetime.fromisoformat(subscription_end)
                sub_end_date_only = sub_end_date.date()
                if three_days_later.date() >= sub_end_date_only >= two_days_later.date():
                    await bot.send_message(
                        user_id,
                        "Вітаю! Нагадую, що через 3 дні вам необхідно буде оплатити підписку на щоденник 😇"
                    )
            except Exception as e:
                logging.error(f"Ошибка при проверке подписки для user_id {user_id}: {e}")


        await asyncio.sleep(24 * 60 * 60)


# Проверка истёкших подписок
async def check_expired_subscriptions():
    while True:
        now = datetime.datetime.now()


        with sqlite3.connect(DB_PATH) as conn:
            c = conn.cursor()
            c.execute("SELECT user_id, subscription_end, payment_status FROM users WHERE payment_status = 'active'")
            users = c.fetchall()


        for user_id, subscription_end, payment_status in users:
            if not subscription_end:
                continue
            try:
                sub_end_date = datetime.datetime.fromisoformat(subscription_end)
                if now <= sub_end_date:
                    continue
                # Даём 1 день после истечения подписки (grace period)
                grace_period_end = sub_end_date + datetime.timedelta(days=1)
                if now <= grace_period_end:
                    continue


                update_subscription(user_id, subscription_end, "expired")
                payment_url = await generate_payment_link(user_id, amount=5)
                if payment_url:
                    payment_keyboard = InlineKeyboardMarkup().add(
                        InlineKeyboardButton("💳 Оплатити", url=payment_url)
                    )
                    await bot.send_message(
                        user_id,
                        "Нажаль не бачу вашої оплати 😔\n"
                        "Будь ласка, оплатіть підписку, щоб продовжити користуватися ботом.",
                        reply_markup=payment_keyboard
                    )
            except Exception as e:
                logging.error(f"Ошибка при проверке истечения подписки для user_id {user_id}: {e}")


        await asyncio.sleep(60 * 60)


# Вебхук для WayForPay
async def wayforpay_webhook(request):
    data = await request.json()
    logging.info(f"WayForPay webhook received: {data}")
    received_signature = data.get("merchantSignature")
    data_to_sign = [
        data.get("merchantAccount", ""),
        data.get("orderReference", ""),
        str(data.get("amount", "")),
        data.get("currency", ""),
        data.get("authCode", ""),
        data.get("cardPan", ""),
        data.get("transactionStatus", ""),
        str(data.get("reasonCode", ""))
    ]
    data_string = ";".join(data_to_sign)
    expected_signature = hmac.new(
        MERCHANT_SECRET_KEY.encode(),
        data_string.encode(),
        hashlib.md5
    ).hexdigest()


    if received_signature != expected_signature:
        logging.error("Неверная подпись от WayForPay")
        return web.Response(text="Invalid signature")


    if data.get("transactionStatus") == "Approved":
        user_id = data.get("orderReference")
        now = datetime.datetime.now()
        subscription_end = (now + datetime.timedelta(days=30)).isoformat()
        update_subscription(user_id, subscription_end, "active")
        await bot.send_message(user_id, "✅ Оплата успішно підтверджена! Ваша підписка активна до " + subscription_end.split("T")[0] + ".")
    return web.Response(text="OK")


# Настройка веб-приложения для вебхука
app = web.Application()
app.router.add_post('/wayforpay_webhook', wayforpay_webhook)


async def on_startup(dp):
    # Устанавливаем вебхук
    webhook_url = "https://<твой_домен>/wayforpay_webhook"  # Замени на твой домен
    await bot.set_webhook(webhook_url)
    logging.info(f"Webhook установлен на {webhook_url}")


    # Запускаем задачи
    asyncio.create_task(send_reminders())
    asyncio.create_task(send_pre_reminders())
    asyncio.create_task(check_subscription_expiry())
    asyncio.create_task(check_expired_subscriptions())


    # Запускаем aiohttp-сервер
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=8080)
    await site.start()
    logging.info("Webhook сервер запущен на http://0.0.0.0:8080")


if __name__ == '__main__':
    init_db()
    # Запускаем бота в режиме вебхука
    loop = asyncio.get_event_loop()
    loop.run_until_complete(on_startup(dp))
    loop.run_forever()