–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫—É "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞" –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

1. –°–æ–∑–¥–∞–π –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É users `/server/db/migrations/add_subscription_fields.ts`:
```typescript
import { sql } from 'drizzle-orm';
import { db } from '../index';

export async function addSubscriptionFields() {
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É users
    await db.execute(sql`
      ALTER TABLE users 
      ADD COLUMN IF NOT EXISTS subscription VARCHAR(50) DEFAULT 'none',
      ADD COLUMN IF NOT EXISTS subscription_start_date TIMESTAMP,
      ADD COLUMN IF NOT EXISTS subscription_end_date TIMESTAMP,
      ADD COLUMN IF NOT EXISTS preferred_language VARCHAR(10) DEFAULT 'uk'
    `);
    
    console.log('‚úÖ Added subscription fields to users table');
  } catch (error) {
    console.error('Error adding subscription fields:', error);
    // –ï—Å–ª–∏ –ø–æ–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
  }
}

–°–æ–∑–¥–∞–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –º–∏–≥—Ä–∞—Ü–∏–π /server/db/migrate.ts:

typescriptimport { addSubscriptionFields } from './migrations/add_subscription_fields';
import { createNewTables } from './migrations/create_new_tables';

async function runMigrations() {
  console.log('üöÄ Running database migrations...');
  
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –≤ users
    await addSubscriptionFields();
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    await createNewTables();
    
    console.log('‚úÖ All migrations completed successfully');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Migration failed:', error);
    process.exit(1);
  }
}

runMigrations();

–°–æ–∑–¥–∞–π –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü /server/db/migrations/create_new_tables.ts:

typescriptimport { sql } from 'drizzle-orm';
import { db } from '../index';

export async function createNewTables() {
  try {
    // –¢–∞–±–ª–∏—Ü–∞ subscriptions
    await db.execute(sql`
      CREATE TABLE IF NOT EXISTS subscriptions (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL REFERENCES users(id),
        plan VARCHAR(50) NOT NULL,
        billing_period VARCHAR(20) NOT NULL,
        start_date TIMESTAMP NOT NULL,
        end_date TIMESTAMP NOT NULL,
        status VARCHAR(20) DEFAULT 'pending',
        payment_order_id VARCHAR(255),
        amount NUMERIC(10,2) NOT NULL,
        currency VARCHAR(10) DEFAULT 'EUR',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    // –¢–∞–±–ª–∏—Ü–∞ ai_requests
    await db.execute(sql`
      CREATE TABLE IF NOT EXISTS ai_requests (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL REFERENCES users(id),
        type VARCHAR(50) NOT NULL,
        tokens_used INTEGER DEFAULT 0,
        cost NUMERIC(10,4) DEFAULT 0,
        model VARCHAR(50) DEFAULT 'gpt-3.5-turbo',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    // –¢–∞–±–ª–∏—Ü–∞ ai_cache
    await db.execute(sql`
      CREATE TABLE IF NOT EXISTS ai_cache (
        id SERIAL PRIMARY KEY,
        question_hash VARCHAR(255) NOT NULL UNIQUE,
        response TEXT NOT NULL,
        language VARCHAR(10) DEFAULT 'uk',
        expires_at TIMESTAMP,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    // –¢–∞–±–ª–∏—Ü–∞ achievements
    await db.execute(sql`
      CREATE TABLE IF NOT EXISTS achievements (
        id SERIAL PRIMARY KEY,
        user_id INTEGER NOT NULL REFERENCES users(id),
        type VARCHAR(100) NOT NULL,
        unlocked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        notified BOOLEAN DEFAULT FALSE
      )
    `);
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    await db.execute(sql`
      CREATE INDEX IF NOT EXISTS idx_subscriptions_user_id ON subscriptions(user_id);
      CREATE INDEX IF NOT EXISTS idx_ai_requests_user_created ON ai_requests(user_id, created_at);
      CREATE INDEX IF NOT EXISTS idx_achievements_user_id ON achievements(user_id);
      CREATE INDEX IF NOT EXISTS idx_ai_cache_hash ON ai_cache(question_hash);
    `);
    
    console.log('‚úÖ Created all new tables successfully');
  } catch (error) {
    console.error('Error creating tables:', error);
    throw error;
  }
}

–û–±–Ω–æ–≤–∏ —Å—Ö–µ–º—É users –≤ /server/db/schema.ts —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏:

typescriptexport const users = pgTable('users', {
  id: serial('id').primaryKey(),
  telegramId: varchar('telegram_id', { length: 255 }).unique(),
  email: varchar('email', { length: 255 }).notNull().unique(),
  password: varchar('password', { length: 255 }).notNull(),
  name: varchar('name', { length: 255 }).notNull(),
  onboardingCompleted: boolean('onboarding_completed').default(false),
  notificationsEnabled: boolean('notifications_enabled').default(true),
  createdAt: timestamp('created_at').defaultNow(),
  
  // –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ)
  subscription: varchar('subscription', { length: 50 }).default('none'),
  subscriptionStartDate: timestamp('subscription_start_date'),
  subscriptionEndDate: timestamp('subscription_end_date'),
  preferredLanguage: varchar('preferred_language', { length: 10 }).default('uk'),
});

–î–æ–±–∞–≤—å –∫–æ–º–∞–Ω–¥—É –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ package.json:

json{
  "scripts": {
    "migrate": "tsx server/db/migrate.ts"
  }
}

–í—ã–ø–æ–ª–Ω–∏ –º–∏–≥—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π: npm run migrate
–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫: npm run dev

–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.